<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ashwin Vishnu's Website - Tech Talk</title><link href="https://ashwinvis.github.io/" rel="alternate"></link><link href="https://ashwinvis.github.io/feeds/tech-talk.atom.xml" rel="self"></link><id>https://ashwinvis.github.io/</id><updated>2021-05-16T12:41:13+02:00</updated><entry><title>Ternary operators</title><link href="https://ashwinvis.github.io/ternary-operators.html" rel="alternate"></link><published>2021-05-16T12:41:13+02:00</published><updated>2021-05-16T12:41:13+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2021-05-16:/ternary-operators.html</id><summary type="html">&lt;p&gt;Different ways to compose ternary operator to condense if-else statements into expressions in several programming languages&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python has made a concious choice of promoting readability through its syntax.
A good example of this is the &lt;strong&gt;conditional expression&lt;/strong&gt; or &lt;strong&gt;ternary if-else
"operator"&lt;/strong&gt; in Python. What it means is instead of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;even_or_odd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Even or odd is defined for positive integers only!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;even&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;odd&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you can write in a condensed yet easy to decipher:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;even_or_odd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Even or odd is defined for positive integers only!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;even&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;odd&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are new to this, I highly recommend that you use this. It would
reduce the indentation in nested if-else statements and need for intermediate
variables in more real-life codes.&lt;/p&gt;
&lt;h2 id="in-other-languages"&gt;&lt;a class="toclink" href="#in-other-languages"&gt;In other languages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In C/C++, Java, ECMAScript (a.k.a JavaScript) and possibly more languages the
syntax is a bit more terse. It looks like this with ECMAScript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;even_or_odd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Even or odd is defined for positive integers only!&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;even&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;odd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An advantage is that the syntax is more condensed; but as a downside, one
needs to remember which side of the colon &lt;code&gt;:&lt;/code&gt; assumes the value when the
condition is &lt;code&gt;True&lt;/code&gt; and &lt;em&gt;vice versa&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="c-style-ternary-operators-using-logical-operators"&gt;&lt;a class="toclink" href="#c-style-ternary-operators-using-logical-operators"&gt;C-style ternary operators using logical operators&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I found a trick to create similar obfuscated ternary operators in Python. Here it goes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;even_or_odd_ugly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Even or odd is defined for positive integers only!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;even&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;odd&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It looks nearly like the C-style ternary operator, but is not at all readable.
It works because &lt;a href="https://docs.python.org/3/library/stdtypes.html?#boolean-operations-and-or-not"&gt;how the logical boolean operators &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;
short-circuits&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Bash-like shells such expressions can be used to achieve the same effect:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;even_or_odd&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; x -le &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Even or odd is defined for positive integers only!&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;

  &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;x &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;even&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;odd&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While writing shell scripts such "ternary operators" are an idiom, because Bash
commands returns a non-zero value in case of failure. This would be
preferred over use of if-else constructs in Bash which, I think, are
complicated in getting the syntax right.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p build
./build.sh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Build successful!&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Build failed! Cleaning up ...&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -r build
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="bonus-when-to-avoid-if-else-statements-in-python"&gt;&lt;a class="toclink" href="#bonus-when-to-avoid-if-else-statements-in-python"&gt;Bonus: when to avoid if-else statements in Python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We saw a good example of when to use conditional expressions in Python. Now we
go on a tangent to look at some features baked into Python which further allow
the need for if-else statements.&lt;/p&gt;
&lt;h3 id="dictionary-lookup"&gt;&lt;a class="toclink" href="#dictionary-lookup"&gt;Dictionary lookup&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Instead of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# assume the variable `color_of_fruits` is a dictionary&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;color_of_fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color_of_fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you could use the oneliner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color_of_fruits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Environment variables of the system are accessed via a special dictionary-like
object &lt;code&gt;os.environ&lt;/code&gt;. However, for environment variables, there is a handy standard
library function &lt;code&gt;os.getenv&lt;/code&gt; which is useful. Instead of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;CC&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;c_compiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;c_compiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gcc&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;c_compiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gcc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For both the &lt;a href="https://docs.python.org/3/library/stdtypes.html#dict.get"&gt;&lt;code&gt;dict.get&lt;/code&gt;&lt;/a&gt; method and &lt;a href="https://docs.python.org/3.8/library/os.html?#os.getenv"&gt;&lt;code&gt;os.getenv&lt;/code&gt;&lt;/a&gt; function, if
you leave out the default value, you get &lt;code&gt;None&lt;/code&gt; and no &lt;code&gt;KeyError&lt;/code&gt; would
be raised.&lt;/p&gt;
&lt;h3 id="fall-back-values"&gt;&lt;a class="toclink" href="#fall-back-values"&gt;Fall-back values&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Whenever you read files, download text from the internet it is not a 100%
guarantee that the result would be what you expect. In that case you might need
a fall-back value to work with. Take this naive case of reading and printing a
file &lt;code&gt;config.cfg&lt;/code&gt; which is empty:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_config&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;config.cfg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File is empty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From the previous discussion, we see that we can simplify it using
conditional expressions as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_config_conditional&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;config.cfg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File is empty&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However in this case a cleaner option would be to use the short-circuiting
property of the &lt;code&gt;or&lt;/code&gt; operator to assign a fall-back value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_config_fallback&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;config.cfg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;File is empty&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that in Python world, evaluating &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;""&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; as a part of
a boolean expression would mean the same.  Also in &lt;code&gt;print_config_fallback&lt;/code&gt;, the
variable &lt;code&gt;contents&lt;/code&gt; is for illustrative purposes and can be avoided.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a class="toclink" href="#further-reading"&gt;Further reading&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0308/"&gt;PEP 308&lt;/a&gt; which introduced conditional expressions to Python around
  18 years ago.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/stdtypes.html#dict.get"&gt;&lt;code&gt;dict.get&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.8/library/os.html?#os.getenv"&gt;&lt;code&gt;os.getenv&lt;/code&gt; function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech Talk"></category><category term="software"></category><category term="python"></category><category term="bash"></category><category term="c"></category><category term="cpp"></category><category term="java"></category><category term="ecmascript"></category></entry><entry><title>Fixing 434 links in 111 files for pyenv</title><link href="https://ashwinvis.github.io/fixing-links-for-pyenv.html" rel="alternate"></link><published>2020-08-20T16:50:51+02:00</published><updated>2020-08-20T16:50:51+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-08-20:/fixing-links-for-pyenv.html</id><summary type="html">&lt;p&gt;A.K.A. shell scripting is awesome, and why don’t-repeat-yourself (DRY) matters. Context: PyPy moved its repositories to Heptapod (unrelated, but I have to mention it is an awesome source-code forge and a project) and binary builds to downloads.python.org. PyPy could no longer be installed using pyenv. Since I happened to try install PyPy the same day it stopped working, I was among the few it noticed it.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The project pyenv has several small bash scripts, one for each version, both
binary and source builds. This totalled to a staggering 111 files with 434
lines of code containing the base URL &lt;a href="https://bitbucket.org/pypy/pypy/downloads"&gt;https://bitbucket.org/pypy/pypy/downloads&lt;/a&gt;
(which no longer works). On one hand, it makes it easier to understand, to
contribute to and to maintain pyenv. But at rare events such as this, when the
entire PyPy repository gets moved to &lt;a href="https://downloads.python.org/pypy"&gt;https://downloads.python.org/pypy&lt;/a&gt;, it
becomes unnecessarily painful to fix the code, because the &lt;strong&gt;same “value” gets
repeated&lt;/strong&gt; all over the code base. Here is &lt;code&gt;pypy3.5-6.0.0-src&lt;/code&gt; for example:&lt;/p&gt;
&lt;pre&gt;#require_gcc
prefer_openssl11
install_package &amp;quot;openssl-1.1.0j&amp;quot; &amp;quot;https://www.openssl.org/source/old/1.1.0/openssl-1.1.0j.tar.gz#31bec6c203ce1a8e93d5994f4ed304c63ccf07676118b6634edded12ad1b3246&amp;quot; mac_openssl --if has_broken_mac_openssl
install_package &amp;quot;pypy3-v6.0.0-src&amp;quot; &amp;quot;https://bitbucket.org/pypy/pypy/downloads/pypy3-v6.0.0-src.tar.bz2#ed8005202b46d6fc6831df1d13a4613bc40084bfa42f275068edadf8954034a3&amp;quot; &amp;quot;pypy_builder&amp;quot; verify_py35 ensurepip&lt;/pre&gt;
&lt;p&gt;One way to fix this would be to write a Python code parsing all the text. But
for some reason, it felt natural to apply shell scripting to this problem,
functionally.&lt;/p&gt;
&lt;section id="awk-curl-to-parse-and-check-links"&gt;
&lt;h2&gt;AWK + cURL: To parse and check links&lt;/h2&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;#!/bin/awk -f&lt;/span&gt;

&lt;span class="sr"&gt;/install_.*bitbucket.org.pypy/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;new&lt;/span&gt;&lt;span class="o"&gt;=$&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="kr"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/bitbucket.org\/pypy\/pypy\/downloads/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;downloads.python.org/pypy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;new&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;curl -s -o /dev/null -i -w &amp;#39;%{http_code}&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;new&lt;/span&gt;
  &lt;span class="nx"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;getline&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
  &lt;span class="kr"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# print &amp;quot;Working&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;new&lt;/span&gt;
    &lt;span class="kr"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# print &amp;quot;Not Working&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kr"&gt;print&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;AWK makes it effortless to match patterns and split fields based on arbitary
whitespace. Once the URL is detected, the AWK built-in &lt;code&gt;gsub&lt;/code&gt; is used, similar
to sed, to replace the link into a variable. The link is pinged using cURL and
only the header is retrieved, printing out 200 if the link works. The link is
then replaced with the new alternative if the link works. The last AWK block
&lt;code&gt;{print}&lt;/code&gt; spits out every line, modified or not.&lt;/p&gt;
&lt;p&gt;A downside of using AWK is it strips out any white space, which is a problem as
indentation gets broken. As a stop gap measure, I hard code an indentation of 2
spaces which seemed to be the most common occurrence.&lt;/p&gt;
&lt;p&gt;The AWK script (&lt;code&gt;links.awk&lt;/code&gt;) can be applied on a single file without any
edits as follows:&lt;/p&gt;
&lt;pre&gt;❯ awk -f links.awk pypy3.3-5.5-alpha&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="bash-gnu-parallel-to-parallelize-and-map-the-script-over-all-files"&gt;
&lt;h2&gt;Bash + GNU Parallel: To parallelize and map the script over all files&lt;/h2&gt;
&lt;pre class="m-code"&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -e
awk -f links.awk &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;.new&amp;quot;&lt;/span&gt;
mv -f &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;.new&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This nifty bash script takes one argument &lt;code&gt;$1&lt;/code&gt; which is a file we need to
change and outputs to a temporary file. If no error is encountered the original
file is replaced.&lt;/p&gt;
&lt;p&gt;The bash script (&lt;code&gt;links.sh&lt;/code&gt;) is parallelized on all files. An arbitrary
threshold of 4 processes are set in order to not spam the server:&lt;/p&gt;
&lt;pre&gt;ls pypy* -1 | parallel -j4 &amp;quot;./links.sh {}&amp;quot;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="vim-auto-formatting-bash-code"&gt;
&lt;h2&gt;Vim: Auto-formatting bash code&lt;/h2&gt;
&lt;p&gt;I needed to format the bash code to counter the indentations stripped out by
the AWK code. However, I did not want to touch all lines, because the files in
pyenv uses a strange code-style, where case blocks are not indented as it
should be:&lt;/p&gt;
&lt;pre&gt;case &amp;quot;$(pypy_architecture 2&amp;gt;/dev/null || true)&amp;quot; in
&amp;quot;linux&amp;quot; )
  install_package &amp;quot;pypy-1.6&amp;quot; &amp;quot;https://downloads.python.org/pypy/pypy-1.6-linux.tar.bz2#1266c8b5918d84432b8649535fb5c84f6b977331c242bf45c5944033562ce0b2&amp;quot; &amp;quot;pypy&amp;quot; verify_py27 ensurepip
  ;;
...&lt;/pre&gt;
&lt;p&gt;To my delight, Vim can &lt;a href="https://vim.fandom.com/wiki/Format_a_code_block"&gt;format&lt;/a&gt; any code intelligently, for an entire buffer, or
a block or a line (which is what I needed). A simple normal-mode mapping
&lt;code&gt;==&lt;/code&gt; works like a charm. I came up with this Vim script to search
for a pattern in a file and indent them.&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:FixIndents&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;ft&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;bash &lt;span class="nb"&gt;smartindent&lt;/span&gt;

&lt;span class="c"&gt;  &amp;quot; start at the top&lt;/span&gt;
  normal gg

&lt;span class="c"&gt;  &amp;quot; search for a particular string till end of the file, do not wrap&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; search&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^\\s*install_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; auto indent&lt;/span&gt;
    normal &lt;span class="p"&gt;==&lt;/span&gt;
  &lt;span class="k"&gt;endwhile&lt;/span&gt;

&lt;span class="c"&gt;  &amp;quot; save and quit&lt;/span&gt;
  &lt;span class="nb"&gt;write&lt;/span&gt;
  quit
&lt;span class="k"&gt;endfunction&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;One way to execute this would be to open all files as buffers in Vim and use
the &lt;code&gt;:source&lt;/code&gt; (to source the above Vim script) and &lt;code&gt;:bufdo call
FixIndents()&lt;/code&gt; command (to apply the function on all buffers). However this
proved to be too slow. Thus, once again the Vim script (&lt;code&gt;fix_indents.vim&lt;/code&gt;) is
sourced and the function &lt;code&gt;FixIndents()&lt;/code&gt; is called on the all files as
follows:&lt;/p&gt;
&lt;pre&gt;ls -1 pypy* | parallel &amp;quot;vim --not-a-term -S fix_indents.vim +'call FixIndents()' {}&amp;quot;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;It was a pleasing and learning experience to discover new bells and whistles of
tools that I often use. And all thanks to UNIX philosophy, disparate tools can
work together in harmony. The &lt;a href="https://github.com/pyenv/pyenv/pull/1682"&gt;end-result&lt;/a&gt; was merged into pyenv today.&lt;/p&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="software"></category><category term="python"></category><category term="open-source"></category></entry><entry><title>Power to the user (CSS)</title><link href="https://ashwinvis.github.io/power-to-the-usercss.html" rel="alternate"></link><published>2020-06-24T09:30:09+02:00</published><updated>2020-06-24T09:30:09+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-06-24:/power-to-the-usercss.html</id><summary type="html">&lt;p&gt;Tweaking the world wide web, one CSS stylesheet at a time&lt;/p&gt;</summary><content type="html">&lt;p&gt;You probably know that you can tweak appearance of websites with add-ons like
Stylus.  Ever since I figured out &lt;a href="https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector"&gt;how to use
Inspector&lt;/a&gt; and
&lt;a href="https://github.com/openstyles/stylus/wiki/Writing-styles"&gt;how to write&lt;/a&gt;
"installable" CSS stylesheets myself, I cannot resist the urge to fix websites
with a uneasy appearance. I try to fix it with a few lines of CSS and share it
with others.&lt;/p&gt;
&lt;h2 id="github-retro"&gt;&lt;a class="toclink" href="#github-retro"&gt;&lt;a href="https://gist.github.com/ashwinvis/569e7814ff91f52807554789afa7f107"&gt;GitHub Retro&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;GitHub quickly rolled out a new wider interface, which could be done a bit better,
IMHO.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Before&lt;/th&gt;
&lt;th align="center"&gt;After&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;img src="https://user-images.githubusercontent.com/9155111/85446389-ac604900-b594-11ea-8a1f-1018031719e0.png" width="100%"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;img src="https://user-images.githubusercontent.com/9155111/85515309-42c85500-b5fd-11ea-94d1-057e972bdc8c.png" width="100%"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/ashwinvis/569e7814ff91f52807554789afa7f107"&gt;Get it here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="mastodon-relax"&gt;&lt;a class="toclink" href="#mastodon-relax"&gt;&lt;a href="https://github.com/ashwinvis/mastodon-relax"&gt;Mastodon Relax&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is more advanced as it uses &lt;a href="https://github.com/FirefoxBar/xStyle/wiki/Style-format#use-advanced-options-in-styles"&gt;configurable
parameters&lt;/a&gt;.
The CSS rules are also less hacky, thanks to identifiable CSS classes in
Mastodon's frontend.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Before&lt;/th&gt;
&lt;th align="center"&gt;After&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;img alt="mr-before" src="https://raw.githubusercontent.com/ashwinvis/mastodon-relax/master/images/before.png"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;img alt="mr-after" src="https://raw.githubusercontent.com/ashwinvis/mastodon-relax/master/images/after.png"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="https://github.com/ashwinvis/mastodon-relax"&gt;Get it here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The stylesheets are CC-BY-SA licensed. Hope it is useful for you.&lt;/p&gt;</content><category term="Tech Talk"></category><category term="software"></category><category term="css"></category></entry><entry><title>Think before you monospace</title><link href="https://ashwinvis.github.io/ultimate-monospace.html" rel="alternate"></link><published>2020-06-15T17:23:27+02:00</published><updated>2020-06-15T17:23:27+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-06-15:/ultimate-monospace.html</id><summary type="html">&lt;p&gt;Put your programming font to the ultimate test case.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I conducted a &lt;a href="https://mastodon.acc.sunet.se/web/statuses/104329832337934635"&gt;poll&lt;/a&gt; on Mastodon to see if what fonts are used in programming
these days.&lt;/p&gt;
&lt;a href="https://mastodon.acc.sunet.se/web/statuses/104329832337934635"&gt;&lt;img alt="Poll on monospace font preference." class="m-image" src="/images/monospace_poll.png" /&gt;&lt;/a&gt;
&lt;p&gt;Despite the limited sample size, the poll seemed representative of package
installation &lt;a href="https://pkgstats.archlinux.de/compare/packages#packages=adobe-source-code-pro-fonts,ttf-anonymous-pro,ttf-bitstream-vera,ttf-cascadia-code,ttf-dejavu,ttf-hack,ttf-liberation,ttf-ms-fonts"&gt;statistics&lt;/a&gt;. After going through the replies to the &lt;a href="https://mastodon.acc.sunet.se/web/statuses/104329832337934635"&gt;poll&lt;/a&gt;, I
discovered a web application called &lt;a href="https://www.programmingfonts.org/"&gt;programming-fonts&lt;/a&gt; where you can try out 98
monospace fonts with syntax highlighting on the fly. However, a good test case was
missing.&lt;/p&gt;
&lt;p&gt;It is unlikely that a font would meet all features, while being &lt;em&gt;aesthetic&lt;/em&gt;.
Features include how similar characters are &lt;em&gt;distinguishable&lt;/em&gt; and eye-candy
like &lt;a href="https://www.hanselman.com/blog/MonospacedProgrammingFontsWithLigatures.aspx"&gt;ligatures&lt;/a&gt; (which can be useful or &lt;a href="https://nedbatchelder.com/blog/201604/latos_unfortunate_ligatures.html"&gt;weird&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;As they say,&lt;/p&gt;
&lt;blockquote&gt;
“Beauty lies in the eyes of the beholder.”&lt;/blockquote&gt;
&lt;p&gt;Here is a test case with some pseudo-code to identify common pitfalls and
features. See if it fits your needs and ensure no surprises.&lt;/p&gt;
&lt;style&gt;
 pre, code {
     font-family: monospace;
 }
 &lt;/style&gt;&lt;aside class="m-note m-info"&gt;
The test case below should render with the default monospace font
configured in your system. There are instructions in the end of the article
to try out a different font online by copying this test case template
as raw text.&lt;/aside&gt;
&lt;section id="test-case-template"&gt;
&lt;h2&gt;Test case template&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;&lt;span class="nd"&gt;@test&lt;/span&gt;                                 &lt;span class="c1"&gt;# INFO: How @ gets rendered&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ultimate_monospace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="c1"&gt;# INFO: Ligature for arrow&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;nfo&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;lnfo&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;Info&lt;/span&gt;       &lt;span class="c1"&gt;# WARN: 1, l, I should be distinguishable&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;                     &lt;span class="c1"&gt;# WARN: 0 and O should be distinguishable&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ifnd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                 &lt;span class="c1"&gt;# WARN: Ligature for fi&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="c1"&gt;# INFO: Ligature for ==, &amp;gt;=&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Octave&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;oper&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="o"&gt;~=&lt;/span&gt; &lt;span class="n"&gt;equals&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;% INFO: Ligature for &amp;amp;&amp;amp;; WARN: for ~=&lt;/span&gt;
     &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;arrow_operator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;              &lt;span class="c1"&gt;// INFO: Ligatures for arrow operator&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;lt;!-- INFO: Ligatures for HTML  --&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;/&amp;gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; tag &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Perl / Ruby / PHP&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                               &lt;span class="c1"&gt;# INFO: Ligatures for spaceship operator&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Haskell&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;-- INFO: Ligatures for Haskell operators: ++, &amp;gt;&amp;gt;=,&amp;lt;&amp;lt;=, &amp;gt;=&amp;gt;, &amp;lt;=&amp;lt;&lt;/span&gt;
&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="c1"&gt;-- instead of&lt;/span&gt;
&lt;span class="nf"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;span class="c1"&gt;-- simply go with&lt;/span&gt;
&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;

&lt;span class="c1"&gt;-- instead of&lt;/span&gt;
&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;span class="c1"&gt;-- simply go with&lt;/span&gt;
&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;span class="c1"&gt;-- or&lt;/span&gt;
&lt;span class="nf"&gt;g&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="try-it-yourself"&gt;
&lt;h2&gt;Try it yourself&lt;/h2&gt;
&lt;p&gt;Here is how the above test case renders with Python syntax highlighting and
Fira Code font:&lt;/p&gt;
&lt;a href="https://www.programmingfonts.org/"&gt;&lt;img alt="Monospace font preview on programmingfonts.org" class="m-image" src="/images/monospace_preview.png" /&gt;&lt;/a&gt;
&lt;aside class="m-note m-primary"&gt;
Feel free to copy the &lt;a href="https://raw.githubusercontent.com/ashwinvis/ashwinvis.github.io/develop/content/2020-06-15-ultimate-monospace.rst"&gt;raw-text&lt;/a&gt; and try it out on &lt;a href="https://www.programmingfonts.org/"&gt;programming-fonts&lt;/a&gt;.&lt;/aside&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="software"></category><category term="typography"></category><category term="ligatures"></category><category term="programming"></category></entry><entry><title>Automate boring writing with Vim</title><link href="https://ashwinvis.github.io/automate-boring-writing-with-vim.html" rel="alternate"></link><published>2020-05-29T18:23:23+02:00</published><updated>2020-11-20T00:00:00+01:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-05-29:/automate-boring-writing-with-vim.html</id><summary type="html">&lt;p&gt;Constructing obscure keyboard maps a.k.a. shortcuts in Vim to make repetitive tasks easier&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Two of my most used markup languages these days are Markdown and
reStructuredText. For instance, a common operation is two add hyperlinks while
blogging.  Both languages provide concise syntaxes to make links, but they tend
to need a lot more keystrokes to get it right. Another pain-point is the need for
escaping certain special characters while searching and replacing text.&lt;/p&gt;
&lt;p&gt;Well, not anymore!&lt;/p&gt;
&lt;section id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/tpope/vim-surround"&gt;vim-surround&lt;/a&gt;, &lt;a href="https://github.com/neovim/pynvim"&gt;pynvim&lt;/a&gt; + Neovim / Vim compiled with Python bindings&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-it-works"&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;Vim can be configured to behave differently based on the state it is in (reading to
buffer, file type, vim mode etc.). Keyboard shortcuts can be &lt;em&gt;mapped&lt;/em&gt; for such
scenarios either of these commands &lt;code&gt;map, nmap, imap, vmap, noremap, nnoremap,
inoremap, vnoremap&lt;/code&gt;.&lt;/p&gt;
&lt;section id="markdown"&gt;
&lt;h3&gt;Markdown&lt;/h3&gt;
&lt;p&gt;The following maps &lt;span class="strike"&gt;Shift+Enter&lt;/span&gt; &lt;code&gt;\a&lt;/code&gt; in the normal mode:&lt;/p&gt;
&lt;aside class="m-block m-warning"&gt;
&lt;h3&gt;Warning&lt;/h3&gt;
&lt;p&gt;Due to a quirk in terminals, it would be difficult to map &lt;code&gt;Shift+Enter&lt;/code&gt; /
&lt;code&gt;&amp;lt;S-CR&amp;gt;&lt;/code&gt; and &lt;code&gt;Ctrl+Enter&lt;/code&gt; / &lt;code&gt;&amp;lt;C-CR&amp;gt;&lt;/code&gt;.  Mapping &lt;code&gt;Shift-Enter&lt;/code&gt; might
be possible with some &lt;a href="https://stackoverflow.com/questions/16359878/vim-how-to-map-shift-enter"&gt;extra configuration&lt;/a&gt;
in your terminal. See also this stackoverflow &lt;a href="https://stackoverflow.com/a/598404"&gt;answer&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;&amp;quot;Markdown: inline-link maker&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;surround with [], find ], append ()&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown&lt;span class="p"&gt;,&lt;/span&gt;pandoc nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt; ysiW]&lt;span class="k"&gt;f&lt;/span&gt;]&lt;span class="k"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;to add an inline link:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;&lt;span class="ge"&gt;before&lt;/span&gt;
A sample sentence with a link

&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;&lt;span class="ge"&gt;after&lt;/span&gt;
A sample sentence with a [link]()&lt;/pre&gt;
&lt;p&gt;The following maps &lt;code&gt;Enter&lt;/code&gt; in the normal mode:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;&amp;quot;Markdown: link maker&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;yank inner word, surround with [], find ], append [], paste word, move right&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;mark l, go to end of file, add a line, append [], paste, move right, append:&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown&lt;span class="p"&gt;,&lt;/span&gt;pandoc nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; yiWysiW]&lt;span class="k"&gt;f&lt;/span&gt;]&lt;span class="k"&gt;a&lt;/span&gt;[]&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;PlmlGo&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;[]&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pla:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;to add a link with a handle:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;&lt;span class="ge"&gt;before&lt;/span&gt;
A sample passage with a link and containing
a lot of text.

&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;&lt;span class="ge"&gt;after&lt;/span&gt;
A sample passage with a [&lt;span class="nt"&gt;link&lt;/span&gt;][&lt;span class="nl"&gt;link&lt;/span&gt;] and containing
a lot of text.
[link]:&lt;/pre&gt;
&lt;p&gt;You can return back to the text by visiting the mark with &lt;code&gt;l&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following maps &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, &lt;code&gt;h3&lt;/code&gt;, &lt;code&gt;h4&lt;/code&gt; to create headings in the
normal mode:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;&amp;quot;Markdown: heading maker&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;mark h, go to beginning of the line, add #/##/###/### , go back to mark h&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown&lt;span class="p"&gt;,&lt;/span&gt;pandoc nmap h1 &lt;span class="nb"&gt;mh&lt;/span&gt;^&lt;span class="k"&gt;i&lt;/span&gt;#&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;`&lt;span class="k"&gt;h&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown&lt;span class="p"&gt;,&lt;/span&gt;pandoc nmap h2 &lt;span class="nb"&gt;mh&lt;/span&gt;^&lt;span class="k"&gt;i&lt;/span&gt;##&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;`&lt;span class="k"&gt;h&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown&lt;span class="p"&gt;,&lt;/span&gt;pandoc nmap h3 &lt;span class="nb"&gt;mh&lt;/span&gt;^&lt;span class="k"&gt;i&lt;/span&gt;###&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;`&lt;span class="k"&gt;h&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown&lt;span class="p"&gt;,&lt;/span&gt;pandoc nmap h4 &lt;span class="nb"&gt;mh&lt;/span&gt;^&lt;span class="k"&gt;i&lt;/span&gt;####&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;`&lt;span class="k"&gt;h&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;&lt;span class="ge"&gt;before&lt;/span&gt;
A Heading

&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;&lt;span class="ge"&gt;after&lt;/span&gt;
&lt;span class="gh"&gt;# A Heading&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="restructuredtext"&gt;
&lt;h3&gt;reStructuredText&lt;/h3&gt;
&lt;p&gt;The following maps &lt;span class="strike"&gt;Shift+Enter&lt;/span&gt; &lt;code&gt;\a&lt;/code&gt; in the normal mode:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;&amp;quot;rST: inline-link maker&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;surround with ``, find `, append __, move left by 2 characters, insert &amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt; ysiW`&lt;span class="k"&gt;f&lt;/span&gt;`a__&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;hi&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;to add an inline link:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="cp"&gt;.. before&lt;/span&gt;
A sample sentence with a link

&lt;span class="cp"&gt;.. after&lt;/span&gt;
A sample sentence with a &lt;span class="s"&gt;`link &amp;lt;&amp;gt;`__&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The following maps &lt;code&gt;Enter&lt;/code&gt; in the normal mode:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;&amp;quot;rST: link maker&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;yank inner word, go to end of word, append _, mark l, end of document, add a&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;new line, insert .. _, paste, append:&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; yiWEa_&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;mlGo&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;..&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;_&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;pa&lt;/span&gt;:&lt;/pre&gt;
&lt;p&gt;to add a link with a handle:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="cp"&gt;.. before&lt;/span&gt;
A sample passage with a link and containing
a lot of text.

&lt;span class="cp"&gt;.. after&lt;/span&gt;
A sample passage with a link_ and containing
a lot of text.
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;_link:&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;You can return back to the text by visiting the mark with &lt;code&gt;l&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following maps &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, &lt;code&gt;h3&lt;/code&gt;, &lt;code&gt;h4&lt;/code&gt; to create headings in the
normal mode:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;&amp;quot;rST: heading maker&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst nmap h1 yypVr#
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst nmap h2 yypVr&lt;span class="p"&gt;=&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst nmap h3 yypVr&lt;span class="p"&gt;-&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst nmap h4 yypVr&lt;span class="p"&gt;~&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-code"&gt;&lt;span class="cp"&gt;.. before&lt;/span&gt;
A Heading

&lt;span class="cp"&gt;.. after&lt;/span&gt;
&lt;span class="gh"&gt;A Heading&lt;/span&gt;
&lt;span class="gh"&gt;#########&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="search-and-replace"&gt;
&lt;h3&gt;Search and replace&lt;/h3&gt;
&lt;p&gt;In most editors, you could use &lt;code&gt;Ctrl+f&lt;/code&gt; to search text and &lt;code&gt;Ctrl+r&lt;/code&gt; to
search and replace text. While searching in Vim is a piece of cake with &lt;code&gt;/&lt;/code&gt;
key, search and replace is often a bit more painful.&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;{{{ Select (visual mode) and search / replace&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;python3&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endpython3
import &lt;span class="k"&gt;re&lt;/span&gt;
import &lt;span class="k"&gt;vim&lt;/span&gt;

&lt;span class="nb"&gt;def&lt;/span&gt; py_regex_escape&lt;span class="p"&gt;(&lt;/span&gt;string&lt;span class="p"&gt;=&lt;/span&gt;None&lt;span class="p"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;h&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; string &lt;span class="k"&gt;if&lt;/span&gt; string &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;vim&lt;/span&gt;.eval&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;@h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;h&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;re&lt;/span&gt;.escape&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.replace&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; string:
      print&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;:
      &lt;span class="k"&gt;vim&lt;/span&gt;.command&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;let @h=&amp;#39;{}&amp;#39;&amp;quot;&lt;/span&gt;.format&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

endpython3

command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;? RegexEscape :&lt;span class="k"&gt;py3&lt;/span&gt; py_regex_escape&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;args&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; http://stackoverflow.com/questions/676600/#676619&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Below h is used as a register to yank into&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Also search with \v prefix for searching with very magic and&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; if needed \V prefix with very nomagic. See `:help magic`&lt;/span&gt;
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;quot;hy:RegexEscape&amp;lt;CR&amp;gt;/\v&amp;lt;C-r&amp;gt;h&lt;/span&gt;
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;r&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;quot;hy:RegexEscape&amp;lt;CR&amp;gt;:%s/\v&amp;lt;C-r&amp;gt;h//gc&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;}}}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This powerful mapping would automatically try to do &lt;strong&gt;a Python regular expression
escape and fill the search or search-and-replace command&lt;/strong&gt; with a sample text
you selected in visual mode. An obvious caveat is that Python regex and Vim
regex are not identical. I have found the &lt;em&gt;very-magic&lt;/em&gt; mode to be close to
Python regex.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="improvements"&gt;
&lt;h3&gt;Improvements?&lt;/h3&gt;
&lt;p&gt;Before you say it, I agree these solutions are &lt;em&gt;far from elegant&lt;/em&gt;. Perhaps
&lt;a href="https://github.com/SirVer/ultisnips"&gt;UltiSnips&lt;/a&gt; can come in handy to create links. Let me know you find it useful or
you can improve it.&lt;/p&gt;
&lt;aside class="m-block m-info"&gt;
&lt;h3&gt;License&lt;/h3&gt;
&lt;p&gt;The code snippets above can be reused with an &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;Apache-2.0&lt;/a&gt; license.&lt;/p&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="software"></category><category term="markdown"></category><category term="rst"></category><category term="vim"></category><category term="writing"></category></entry><entry><title>Buying a new phone</title><link href="https://ashwinvis.github.io/buying-a-new-phone.html" rel="alternate"></link><published>2020-04-09T06:09:37+02:00</published><updated>2020-04-09T06:09:37+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-04-09:/buying-a-new-phone.html</id><summary type="html">&lt;p&gt;One that lasts&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been witnessing the evolution of smart phones into fragile and data
hungry beasts that they are today, crippling essential features such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.5 mm headphone jacks&lt;/li&gt;
&lt;li&gt;removable batteries&lt;/li&gt;
&lt;li&gt;ability to unlock the bootloader (root)&lt;/li&gt;
&lt;li&gt;install a new OS (flash)&lt;/li&gt;
&lt;li&gt;reliance on Google Play Services for even mainstream apps such as BankID in
  Sweden&lt;/li&gt;
&lt;li&gt;lack of spare parts and support in a couple of years&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And as a result I have resisted the urge of getting a new phone for the past 2
months. But with Covid-19, I accept that having a phone around is essential to
stay in touch with close ones.&lt;/p&gt;
&lt;p&gt;After much contemplation my criteria boiled down to the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Repairable with long-term support: both software updates and hardware
   warranty.&lt;/li&gt;
&lt;li&gt;Community support in an effort to develop towards a working Linux phone.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The candidates were
&lt;a href="https://ubports.com/blog/ubports-blog-1/post/pinephone-ubports-community-edition-pre-orders-are-open-271"&gt;PinePhone&lt;/a&gt;
at USD 150 and &lt;a href="https://shop.fairphone.com/en/"&gt;Fairphone 3&lt;/a&gt; at €475. In
comparison with the existing market these phones have have medium
specifications. However I put the above two criteria over all shiny details
that people tend to care more about like looks, performance and camera. I have
a stand-alone camera and a gaming device, so why should I bother?&lt;/p&gt;
&lt;h2 id="why-and-why-not-pinephone"&gt;&lt;a class="toclink" href="#why-and-why-not-pinephone"&gt;Why and why not PinePhone&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The advantages of PinePhone is it already "works" with existing Linux projects
such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.postmarketos.org/wiki/Devices"&gt;postmarketOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ubports.com/"&gt;UBports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and it is cheap. However the company only started working on phones &lt;a href="https://en.wikipedia.org/wiki/Pine_Microsystems#Smartphone"&gt;a year
ago&lt;/a&gt; and when I
checked the availability of spare parts, the most essential one which is a
&lt;a href="https://store.pine64.org/?product=pinephone-lithium-battery-only-ship-in-us-2"&gt;battery&lt;/a&gt;
only ships in US and was out of stock. Also there is hardly any warranty.&lt;/p&gt;
&lt;h2 id="but-fairphone"&gt;&lt;a class="toclink" href="#but-fairphone"&gt;But Fairphone...?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At the cost it is selling it is as expensive as so-called "flagship" phones.
The cost covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sourcing rare materials from non war-torn regions&lt;/li&gt;
&lt;li&gt;providing fair work conditions for factories in China&lt;/li&gt;
&lt;li&gt;recycling old phones&lt;/li&gt;
&lt;li&gt;modularity and support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While Fairphone 2 is no longer in sale, it is one of the featured phones by the
UBPorts project. Fairphone 3 right now does not have a Linux OS option, and not
even a "unGoogled" Android ROM such as &lt;a href="https://wiki.lineageos.org/devices/"&gt;Lineage
OS&lt;/a&gt;. It will take some time for the
developers to get it to working condition, because &lt;a href="https://fosdem.org/2020/schedule/event/smartphones/"&gt;ARM
development&lt;/a&gt; is a lot of
work. The /e/ foundation - a fork of Lineage OS is &lt;a href="https://mastodon.social/@e_mydata/103912398236907028"&gt;working on
it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All you need is a little push in the right direction.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a hardware warranty for two years&lt;/li&gt;
&lt;li&gt;Fairphone continues to sell spare parts for older phones&lt;/li&gt;
&lt;li&gt;Assured software updates for 5 years&lt;/li&gt;
&lt;li&gt;Official tutorial on &lt;a href="https://support.fairphone.com/hc/en-us/articles/360041655711-Unlock-the-bootloader-of-your-Fairphone-3"&gt;unlocking the
  bootloader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As for the price, if it is any consolation, compare the to an average grocery
shopping which would be around €50 in Sweden, it is not so expensive.  I got a
discount code at the end, which I wish I received earlier. So I might as well
share it here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Give your friends a €25 discount on a Fairphone 3 and get a €20 discount on
your next order.
&lt;a href="http://fairphone.refr.cc/ashwinvishnum"&gt;http://fairphone.refr.cc/ashwinvishnum&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No, I was not paid to write this, but I really like the concept and I hope more
such projects emerge. Let's work towards a &lt;a href="https://en.wikipedia.org/wiki/Circular_economy"&gt;circular
economy&lt;/a&gt;.&lt;/p&gt;</content><category term="Tech Talk"></category><category term="life"></category><category term="covid-19"></category><category term="phone"></category></entry><entry><title>Hack the Crisis: We Care!</title><link href="https://ashwinvis.github.io/hack-the-crisis.html" rel="alternate"></link><published>2020-04-05T20:38:02+02:00</published><updated>2020-04-06T08:01:00+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-04-05:/hack-the-crisis.html</id><summary type="html">&lt;p&gt;How we created project &lt;em&gt;We Care!&lt;/em&gt; in this COVID-19 themed hackathon&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This weekend I was part of a great and amazing group of people working as a
team.  We where coders, designers, ideators, jack-of-all-trades, creators,
academics, researchers and doers. We all where part of even a bigger team in
the Hack for Crisis Initiative in Sweden &lt;a href="https://www.hackthecrisis.se/"&gt;https://www.hackthecrisis.se/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We came together from all different parts, working purely online, never worked
with each other before, We created &lt;em&gt;We Care!&lt;/em&gt;, a &lt;a href="https://covidmap.se"&gt;website&lt;/a&gt; and an app
concept to keep you safe in crisis, that we submitted.&lt;/p&gt;
&lt;p&gt;Here is a demo &lt;a href="https://www.youtube.com/watch?v=rsBZuJEH1c0"&gt;video&lt;/a&gt; and a screenshot from the live &lt;a href="https://covidmap.se"&gt;website&lt;/a&gt; of our solution.&lt;/p&gt;
&lt;div align='center'&gt;
&lt;iframe id='ivplayer' width='100%' height='500px' src='https://invidious.snopyta.org/embed/rsBZuJEH1c0' style='border:none;'&gt;
&lt;/iframe&gt;
&lt;iframe src="https://pixelfed.social/p/ashwinvis/152654039161638912/embed?caption=true&amp;likes=false&amp;layout=full" class="pixelfed__embed" style="max-width: 100%; border: 0" width="100%" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;script async defer src="https://pixelfed.social/embed.js"&gt;&lt;/script&gt;
&lt;/div&gt;&lt;section id="nitty-gritty-details"&gt;
&lt;h2&gt;Nitty-gritty details&lt;/h2&gt;
&lt;p&gt;The stack consists of a website (&lt;a href="https://covidmap.se/"&gt;https://covidmap.se/&lt;/a&gt;) where the user can enter
symptom data as well as their postal code. This is then submitted to a Firebase
database, from which a Python application downloads the data submitted and
analyzes it in batches. The aggregated, anonymized results are then published
back to the database and can be viewed in the map.&lt;/p&gt;
&lt;p&gt;The whole system was designed to function as follows:&lt;/p&gt;
&lt;img class="m-image" src="https://raw.githubusercontent.com/covidmap-sweden/welcome/master/architecture.jpg" style="width: 100%" /&gt;
&lt;p&gt;A future improvement to this could either be to do the Python computation
directly in the Firebase Cloud Function and then submitted to the Firebase
database. Alternatively, to have the website publish its data to the Python
backend which in turn will post the outcome of the analysis to the Firebase
database. Either way, the user will get a response on their input.&lt;/p&gt;
&lt;p&gt;The motivation for using postal codes is to get a granular overview of the
spread while still being within compliance of GDPR. Other suggestions have been
using Bank-ID as a user id form, but that combined with medical data would be a
GDPR issue we were not able to handle during the hackathon. We will also ensure
compliance with Swedish laws on research ethics, submitting for ethical review
if required so that collected data can be used for research purposes.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-backend-alley"&gt;
&lt;h2&gt;The backend alley&lt;/h2&gt;
&lt;p&gt;On a personal note, I was working on getting the Python backend (written using
SQL Alchemy and Pandas) up and running. The essential pieces were present
thanks to the original Swiss team which open-sourced the project. The
enhancements we added on top of it were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;smoothening installation process by adding a basic Python packaging
&lt;code&gt;setup.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;post-processing scripts to calculate symptom risks with Pandas within the
Python backend instead of doing it in the Vue.js frontend side&lt;/li&gt;
&lt;li&gt;a Flask microserver based REST API to reduce the data storage in the database
and perform computation more frequently to keep the website up to date&lt;/li&gt;
&lt;li&gt;Creating a docker image of the application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our intention was the deploy the backend in the cloud, but because of the time
constraint we were unable to achieve that target. For now the backend is
semi-automated. In due time, yes we can!&lt;/p&gt;
&lt;p&gt;Did I mention our implementation was &lt;a href="https://github.com/covidmap-sweden/"&gt;open-source&lt;/a&gt; as well!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-fight-is-far-from-over"&gt;
&lt;h2&gt;The fight is far from over&lt;/h2&gt;
&lt;p&gt;If you want to help us please go in and test &lt;a href="https://covidmap.se"&gt;https://covidmap.se&lt;/a&gt; and self report
yourself and please share this post in your network if you want. You can also
&lt;a href="https://covidmap.se/visualize"&gt;visualize&lt;/a&gt; the aggregated results.&lt;/p&gt;
&lt;p&gt;If you want to fast… go alone, if you want to go far go together. Thanks to
everyone in my team for a great experience. I loved working with you and being
part of this team.&lt;/p&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="software"></category><category term="open-source"></category><category term="covid-19"></category></entry><entry><title>Testing Indieweb Stack</title><link href="https://ashwinvis.github.io/tesing-indieweb-stack.html" rel="alternate"></link><published>2020-03-31T22:54:39+02:00</published><updated>2020-03-01T13:24:00+01:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-03-31:/tesing-indieweb-stack.html</id><summary type="html">&lt;p&gt;A simple test page to see what parts of Indieweb actually works&lt;/p&gt;</summary><content type="html">&lt;p&gt;Indieweb consists of the following building blocks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microformats 2&lt;/li&gt;
&lt;li&gt;Webmentions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This allows one to Publish Own and Syndicate Somewhere Else (POSSE). I have
logged in my progress in the &lt;a href="https://indieweb.org/User:Ashwin.info.tm"&gt;Indieweb
wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="update-posse-works"&gt;&lt;a class="toclink" href="#update-posse-works"&gt;Update: POSSE works&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I managed to publish this post, semi-automatically by sending Bridgy a
webmention as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Embed a blank hyperlink to &lt;code&gt;https://brid.gy/publish/mastodon&lt;/code&gt; as
  &lt;a href="https://brid.gy/about#webmentions"&gt;mentioned here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Send a request &lt;a href="https://indieweb.org/Webmention-developer#How_to_send_webmentions_with_cURL"&gt;using cURL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;❯ curl -i -d &lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://ashwinvis.github.io/tesing-indieweb-stack.html -d &lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://brid.gy/publish/mastodon https://brid.gy/publish/webmention
HTTP/2 &lt;span class="m"&gt;201&lt;/span&gt; 
content-type: application/json&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;utf-8
cache-control: no-cache
access-control-allow-origin: *
content-security-policy: script-src https: localhost:8080 my.dev.com:8080 &lt;span class="s1"&gt;&amp;#39;unsafe-inline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; frame-ancestors &lt;span class="s1"&gt;&amp;#39;self&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; report-uri /csp-report&lt;span class="p"&gt;;&lt;/span&gt;
strict-transport-security: max-age&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;16070400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; preload
x-content-type-options: nosniff
x-frame-options: SAMEORIGIN
x-xss-protection: &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;block
location: https://mastodon.acc.sunet.se/@ashwinvis/103920181819443082
x-cloud-trace-context: 89f23f15ae3916e5ae535cfe3d1b5152&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
date: Tue, &lt;span class="m"&gt;31&lt;/span&gt; Mar &lt;span class="m"&gt;2020&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt;:08:54 GMT
server: Google Frontend
content-length: &lt;span class="m"&gt;3401&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;103920181819443082&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;2020-03-31T23:08:53.759Z&amp;quot;&lt;/span&gt;,
  ...
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Ensure that accidental duplicate posts are avoided.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;❯ curl -i -d &lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://ashwinvis.github.io/tesing-indieweb-stack.html -d &lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://brid.gy/publish/mastodon https://brid.gy/publish/webmention
HTTP/2 &lt;span class="m"&gt;400&lt;/span&gt; 
content-type: application/json&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;utf-8
cache-control: no-cache
access-control-allow-origin: *
content-security-policy: script-src https: localhost:8080 my.dev.com:8080 &lt;span class="s1"&gt;&amp;#39;unsafe-inline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; frame-ancestors &lt;span class="s1"&gt;&amp;#39;self&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; report-uri /csp-report&lt;span class="p"&gt;;&lt;/span&gt;
strict-transport-security: max-age&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;16070400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; preload
x-content-type-options: nosniff
x-frame-options: SAMEORIGIN
x-xss-protection: &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;block
x-cloud-trace-context: 1691edd117aa780e68a530ff0f116824&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
date: Tue, &lt;span class="m"&gt;31&lt;/span&gt; Mar &lt;span class="m"&gt;2020&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt;:09:55 GMT
server: Google Frontend
content-length: &lt;span class="m"&gt;3731&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Sorry, you&amp;#39;ve already published that page, and Bridgy Publish doesn&amp;#39;t support updating existing posts. Details: https://github.com/snarfed/bridgy/issues/84&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;original&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;103920181819443082&lt;/span&gt;
&lt;span class="s2"&gt;    ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="end-result"&gt;&lt;a class="toclink" href="#end-result"&gt;End result&lt;/a&gt;&lt;/h3&gt;
&lt;iframe src="https://mastodon.acc.sunet.se/@ashwinvis/103920181819443082/embed" class="mastodon-embed" style="max-width: 100%; border: 0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;

&lt;script src="https://mastodon.acc.sunet.se/embed.js" async="async"&gt;&lt;/script&gt;

&lt;h3 id="next-steps"&gt;&lt;a class="toclink" href="#next-steps"&gt;Next steps&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To automate this process into CI?&lt;/p&gt;</content><category term="Tech Talk"></category><category term="software"></category></entry><entry><title>Cloud computing for research</title><link href="https://ashwinvis.github.io/cloud-computing.html" rel="alternate"></link><published>2020-03-20T11:29:00+01:00</published><updated>2020-03-25T22:29:00+01:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-03-20:/cloud-computing.html</id><summary type="html">&lt;p&gt;A journal of how I setup BOINC and &lt;a href="mailto:Folding&amp;#64;home"&gt;Folding&amp;#64;home&lt;/a&gt; on my laptop running Arch Linux.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;There is an ongoing effort in all disciplines to find solutions the Covid-19
pandemic. Be it policy (social distancing, call for people to work from home),
technology (repurposing auto, beverages and perfume industries to manufacture
ventilators and hand sanitizers etc., open access to research) and art (hobbies
and music to stay upbeat at home).&lt;/p&gt;
&lt;p&gt;And then there is BOINC and &lt;a href="mailto:Folding&amp;#64;home"&gt;Folding&amp;#64;home&lt;/a&gt; - serious research projects which has
a nice social cloud-computing infrastructure to solve difficult problems. This
also include molecular dynamics simulations using open-source software like
GROMACS by different research groups around the world. My laptop has a
top-notch Quadro RTX 3000 Mobile GPU, so I decided to give it a go.&lt;/p&gt;
&lt;div align="center"&gt;
&lt;iframe src="https://pixelfed.social/p/ashwinvis/146561445096722432/embed?caption=true&amp;likes=false&amp;layout=full" class="pixelfed__embed" style="max-width: 100%; border: 0" width="400" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;script async defer src="https://pixelfed.social/embed.js"&gt;&lt;/script&gt;&lt;p&gt;First off some essentials:&lt;/p&gt;
&lt;pre&gt;# pacman -S opencl-nvidia cuda nvtop&lt;/pre&gt;
&lt;section id="boinc"&gt;
&lt;h2&gt;BOINC&lt;/h2&gt;
&lt;section id="references"&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/BOINC"&gt;https://wiki.archlinux.org/index.php/BOINC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boinc.berkeley.edu/projects.php"&gt;https://boinc.berkeley.edu/projects.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gpugrid.net/join.php"&gt;http://www.gpugrid.net/join.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gpugrid.net/team_display.php?teamid=2985"&gt;https://www.gpugrid.net/team_display.php?teamid=2985&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="how-to"&gt;
&lt;h3&gt;How to&lt;/h3&gt;
&lt;p&gt;Installing and setting up:&lt;/p&gt;
&lt;pre&gt;# pacman -S boinc-nox opencl-nvidia
# usermod -a -G boinc video
# systemctl start boinc-client.service
# systemctl status boinc-client
● boinc-client.service - Berkeley Open Infrastructure Network Computing Client
     Loaded: loaded (/usr/lib/systemd/system/boinc-client.service; disabled; vendor preset: disabled)
     Active: active (running) since Fri 2020-03-20 08:06:50 CET; 1h 44min ago
       Docs: man:boinc(1)
   Main PID: 119973 (boinc)
      Tasks: 2 (limit: 38224)
     Memory: 9.6M
     CGroup: /system.slice/boinc-client.service
             └─119973 /usr/bin/boinc

Mar 20 08:07:37 archmage boinc[119973]: 20-Mar-2020 08:07:37 [---]    (to change preferences, visit a project web site or select Preferences in the Manager)
Mar 20 08:07:37 archmage boinc[119973]: 20-Mar-2020 08:07:37 [---] Setting up project and slot directories
Mar 20 08:07:37 archmage boinc[119973]: 20-Mar-2020 08:07:37 [---] Checking active tasks
Mar 20 08:07:37 archmage boinc[119973]: 20-Mar-2020 08:07:37 [---] Setting up GUI RPC socket
Mar 20 08:07:37 archmage boinc[119973]: 20-Mar-2020 08:07:37 [---] Checking presence of 0 project files
Mar 20 08:07:37 archmage boinc[119973]: 20-Mar-2020 08:07:37 [---] This computer is not attached to any projects
Mar 20 08:07:37 archmage boinc[119973]: 20-Mar-2020 08:07:37 Initialization completed
Mar 20 08:07:37 archmage boinc[119973]: 20-Mar-2020 08:07:37 [---] Suspending GPU computation - computer is in use
Mar 20 08:55:30 archmage boinc[119973]: 20-Mar-2020 08:55:30 [---] Resuming GPU computation
Mar 20 09:14:26 archmage boinc[119973]: 20-Mar-2020 09:14:26 [---] Suspending GPU computation - computer is in use&lt;/pre&gt;
&lt;p&gt;This would generate a password at &lt;code&gt;/var/lib/boinc/gui_rpc_auth.cfg&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;# boinccmd --passwd $(cat /var/lib/boinc/gui_rpc_auth.cfg) --get_host_info
  timezone: 3600
  domain name: archmage
  IP addr: 127.0.1.1
  #CPUS: 12
  CPU vendor: GenuineIntel
  CPU model: Intel(R) Core(TM) i7-9850H CPU &amp;#64; 2.60GHz [Family 6 Model 158 Stepping 13]
  CPU FP OPS: 1000000000.000000
  CPU int OPS: 1000000000.000000
  OS name: Linux Arch
  OS version: Arch Linux [5.5.9-arch1-2|libc 2.31 (GNU libc)]
  mem size: 33419243520.000000
  cache size: 12582912.000000
  swap size: 53687087104.000000
  disk size: 105152544768.000000
  disk free: 57508556800.000000
  NVIDIA GPU: Quadro RTX 3000 (driver version 440.64, CUDA version 10.2, compute capability 7.5, 4096MB, 3970MB available, 5299 GFLOPS peak)
    OpenCL: NVIDIA 0: Quadro RTX 3000 (driver version 440.64, device version OpenCL 1.2 CUDA, 5935MB, 3970MB available, 5299 GFLOPS peak)&lt;/pre&gt;
&lt;p&gt;Create an account in a project (substitute those variables starting with a $
sign):&lt;/p&gt;
&lt;pre&gt;# boinccmd --passwd $(cat /var/lib/boinc/gui_rpc_auth.cfg) \
    --create_account www.gpugrid.net $email $project_passwd $project_username&lt;/pre&gt;
&lt;p&gt;Find the “weak account key” by &lt;a href="https://www.gpugrid.net/login_form.php"&gt;logging in&lt;/a&gt;. Then attach the account to the
project:&lt;/p&gt;
&lt;pre&gt;# boinccmd --passwd $(cat /var/lib/boinc/gui_rpc_auth.cfg) --project_attach www.gpugrid.net $weak_account_key&lt;/pre&gt;
&lt;p&gt;The client should then run while the system is idle.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="folding-home"&gt;
&lt;h2&gt;Folding &amp;#64; home&lt;/h2&gt;
&lt;section id="id1"&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foldingathome.org/start-folding"&gt;https://foldingathome.org/start-folding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Folding&amp;#64;home"&gt;https://wiki.archlinux.org/index.php/Folding&amp;#64;home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stats.foldingathome.org/team/45032"&gt;https://stats.foldingathome.org/team/45032&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="id2"&gt;
&lt;h3&gt;How to&lt;/h3&gt;
&lt;p&gt;Install:&lt;/p&gt;
&lt;pre&gt;# pacman -S foldingathome&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://apps.foldingathome.org/getpasskey"&gt;Register for an account (optional)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Run as a user:&lt;/p&gt;
&lt;pre&gt;❯ mkdir ~/{.config,.cache}/foldingathome
❯ cd ~/.config/foldingathome
❯ FAHClient --configure
User name [Anonymous]: ****
Team number [0]: 45032
Passkey: ****
Enable SMP [true]: false
Enable GPU [true]:
Name of configuration file [config.xml]:
❯ mkdir -p ~/.config/systemd/user/&lt;/pre&gt;
&lt;p&gt;Create a service &lt;code&gt;~/.config/systemd/user/foldingathome.service&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Run folding at home client&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;WorkingDirectory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/avmo/.cache/foldingathome&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/FAHClient --config /home/avmo/.config/foldingathome/config.xml&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Execute:&lt;/p&gt;
&lt;pre&gt;❯ systemctl --user start foldingathome.service
❯ systemctl --user status foldingathome.service
● foldingathome.service - Run folding at home client
     Loaded: loaded (/home/avmo/.config/systemd/user/foldingathome.service; static; vendor preset: enabled)
     Active: active (running) since Fri 2020-03-20 09:38:15 CET; 4s ago
   Main PID: 149577 (FAHClient)
     CGroup: /user.slice/user-1001.slice/user&amp;#64;1001.service/foldingathome.service
             └─149577 /usr/bin/FAHClient --config /home/avmo/.config/foldingathome/config.xml

Mar 20 09:38:15 archmage FAHClient[149577]: 08:38:15:  &amp;lt;!-- Folding Slots --&amp;gt;
Mar 20 09:38:15 archmage FAHClient[149577]: 08:38:15:&amp;lt;/config&amp;gt;
Mar 20 09:38:15 archmage FAHClient[149577]: 08:38:15:Trying to access database...
Mar 20 09:38:15 archmage FAHClient[149577]: 08:38:15:Successfully acquired database lock
Mar 20 09:38:15 archmage FAHClient[149577]: 08:38:15:Enabled folding slot 00: READY cpu:1
Mar 20 09:38:15 archmage FAHClient[149577]: 08:38:15:Enabled folding slot 01: PAUSED gpu:0:TU106GLM [Quadro RTX 3000 Mobile / Max-Q] (waiting for idle)
Mar 20 09:38:15 archmage FAHClient[149577]: 08:38:15:WU00:FS00:Connecting to 65.254.110.245:8080
Mar 20 09:38:16 archmage FAHClient[149577]: 08:38:16:WU00:FS00:Assigned to work server 128.252.203.9
Mar 20 09:38:16 archmage FAHClient[149577]: 08:38:16:WU00:FS00:Requesting new work unit for slot 00: READY cpu:1 from 128.252.203.9

# after a while ...
❯ systemctl --user status foldingathome.service
● foldingathome.service - Run folding at home client
     Loaded: loaded (/home/avmo/.config/systemd/user/foldingathome.service; static; vendor preset: enabled)
     Active: active (running) since Fri 2020-03-20 09:38:15 CET; 19min ago
   Main PID: 149577 (FAHClient)
     CGroup: /user.slice/user-1001.slice/user&amp;#64;1001.service/foldingathome.service
             ├─149577 /usr/bin/FAHClient --config /home/avmo/.config/foldingathome/config.xml
             ├─153643 /usr/bin/FAHCoreWrapper /home/avmo/.cache/foldingathome/cores/cores.foldingathome.org/v7/lin/64bit/avx/Core_a7.fah/FahCore_a7 -dir 00 -suffix 01 -ver&amp;gt;
             └─153647 /home/avmo/.cache/foldingathome/cores/cores.foldingathome.org/v7/lin/64bit/avx/Core_a7.fah/FahCore_a7 -dir 00 -suffix 01 -version 705 -lifeline 15364&amp;gt;

Mar 20 09:55:19 archmage FAHClient[149577]: 08:55:19:WU00:FS00:0xa7:********************************************************************************
Mar 20 09:55:19 archmage FAHClient[149577]: 08:55:19:WU00:FS00:0xa7:Project: 14328 (Run 6, Clone 756, Gen 14)
Mar 20 09:55:19 archmage FAHClient[149577]: 08:55:19:WU00:FS00:0xa7:Unit: 0x000000109bf7a4d65e6d0ea7eac01f9c
Mar 20 09:55:19 archmage FAHClient[149577]: 08:55:19:WU00:FS00:0xa7:Reading tar file core.xml
Mar 20 09:55:19 archmage FAHClient[149577]: 08:55:19:WU00:FS00:0xa7:Reading tar file frame14.tpr
Mar 20 09:55:19 archmage FAHClient[149577]: 08:55:19:WU00:FS00:0xa7:Digital signatures verified
Mar 20 09:55:19 archmage FAHClient[149577]: 08:55:19:WU00:FS00:0xa7:Calling: mdrun -s frame14.tpr -o frame14.trr -cpt 15 -nt 1
Mar 20 09:55:19 archmage FAHClient[149577]: 08:55:19:WU00:FS00:0xa7:Steps: first=3500000 total=250000
Mar 20 09:55:19 archmage FAHClient[149577]: 08:55:19:WU00:FS00:0xa7:Completed 1 out of 250000 steps (0%)
Mar 20 09:57:25 archmage FAHClient[149577]: 08:57:25:WU00:FS00:0xa7:Completed 2500 out of 250000 steps (1%)&lt;/pre&gt;
&lt;p&gt;While the client is running / idle, you can schedule and tweak using the &lt;a href="http://0.0.0.0:7396/"&gt;web client&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;If you want GPU jobs alone, comment out the CPU slots in
&lt;code&gt;~/.config/foldingathome/config.xml&lt;/code&gt; and set power to “Medium” in the web
client.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="software"></category><category term="research"></category><category term="covid-19"></category><category term="hpc"></category></entry><entry><title>Back to Arch Linux</title><link href="https://ashwinvis.github.io/back-to-arch-linux.html" rel="alternate"></link><published>2020-01-03T10:00:41+01:00</published><updated>2020-01-13T00:00:00+01:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-01-03:/back-to-arch-linux.html</id><summary type="html">&lt;p&gt;Within a Ubuntu LTS pre-installed laptop&lt;/p&gt;
</summary><content type="html">&lt;section id="why"&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;It was October 2019. New job, new laptop.&lt;/p&gt;
&lt;p&gt;I tried to tell myself to stay with the LTS that was given to me from the
Canonical and Dell overlords. To be honest, I did not remove Ubuntu from the
get-go was because I was unsure if I can run Nvidia’s CUDA toolkit on an
&lt;a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;amp;target_arch=x86_64/"&gt;unlisted&lt;/a&gt; OS. In my old laptop (2011-2014) on which I had a Nvidia GPU and
which ran Manjaro, I would frequently total my installation every time I ran
&lt;code&gt;pacman -Syu&lt;/code&gt;. The X.org display server would just stop functioning and I
would be left with a terminal to figure out how to get back.&lt;/p&gt;
&lt;p&gt;I thought I could just weed out the bloatware (Google Chrome, Amazon etc.)
and be content with what I have. Trust the Ubuntu and Dell repositories.&lt;/p&gt;
&lt;p&gt;Fast-forward to January 2020.  Turns out, the project which I am on right now
may not get started with CUDA development soon. Therefore, a good OS and GCC
compiler toolchain is all that I need. I have a mutant Ubuntu LTS already with
all the hacks under the sun to stay up-to-date:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyenv/pyenv/"&gt;pyenv&lt;/a&gt; to have the latest Python&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flatpak.org/"&gt;flatpak&lt;/a&gt; to install some applications which are &lt;em&gt;ancient&lt;/em&gt; in the official &lt;a href="https://packages.ubuntu.com/"&gt;Ubuntu repos&lt;/a&gt; (Okular, Signal, KeepassXC, Zeal, Zotero etc.)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appimage.org/"&gt;appimage&lt;/a&gt; when &lt;a href="https://flatpak.org/"&gt;flatpak&lt;/a&gt;’s sandbox is too restrictive (Neovim)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.ubuntu.com/community/PPA"&gt;PPA&lt;/a&gt; / unofficial &lt;code&gt;.deb&lt;/code&gt; packages from GitHub when the start-up overhead of
&lt;a href="https://flatpak.org/"&gt;flatpak&lt;/a&gt; or &lt;a href="https://appimage.org/"&gt;appimage&lt;/a&gt; is way too high (Neovim, again 😅) or similar reasons
as above (Nextcloud client, VSCodium etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is not good at all, I hear you. And I have to wait a good &lt;a href="https://www.omgubuntu.co.uk/2019/10/ubuntu-20-04-release-features"&gt;4 more months&lt;/a&gt;
for the next LTS release! The final blow came when I saw Vim 8.2 was released
last month with &lt;a href="https://github.com/skywind3000/vim-quickui"&gt;popup&lt;/a&gt; support, and I do not have it yet! There is no practical
way (apart from yet another &lt;a href="https://help.ubuntu.com/community/PPA"&gt;PPA&lt;/a&gt;) to get the latest Vim, without compiling it
from source. Either ways, it is also unacceptable to run a desktop environment
(GNOME) which is lagging behind (version 3.28.2) the latest stable release
(version 3.34) for so long!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how"&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;aside class="m-note m-danger"&gt;
Make sure you understand what how &lt;code&gt;chroot&lt;/code&gt; and &lt;code&gt;mount&lt;/code&gt; commands work.
Also do not run &lt;code&gt;rm -rf&lt;/code&gt; at any stage below.&lt;/aside&gt;
&lt;p&gt;There is a nice &lt;a href="https://wiki.archlinux.org/index.php/Install_Arch_Linux_from_existing_Linux#From_a_host_running_another_Linux_distribution"&gt;guide&lt;/a&gt; which demonstrates how to setup Arch Linux from an
existing Linux OS. I started off by &lt;a href="https://www.archlinux.org/download/"&gt;downloading&lt;/a&gt; the bootstrap image along with
the GPG signature and verifying it:&lt;/p&gt;
&lt;pre&gt;$ gpg --keyserver-options auto-key-retrieve --verify archlinux-2020.01.01-x86_64.iso.sig
gpg: assuming signed data in 'archlinux-2020.01.01-x86_64.iso'
gpg: Signature made Wed 01 Jan 2020 06:21:41 AM CET
gpg:                using RSA key 4AA4767BBC9C4B1D18AE28B77F2D434B9741E8AC
gpg: Good signature from &amp;quot;Pierre Schmitz &amp;lt;pierre&amp;#64;archlinux.de&amp;gt;&amp;quot; [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 4AA4 767B BC9C 4B1D 18AE  28B7 7F2D 434B 9741 E8AC&lt;/pre&gt;
&lt;p&gt;The key fingerprint was &lt;a href="https://www.archlinux.org/master-keys/"&gt;cross-checked&lt;/a&gt; to be doubly sure.
Then I extracted the bootstrap image:&lt;/p&gt;
&lt;pre&gt;$ sudo su
# tar xzf archlinux-bootstrap-2020.01.01-x86_64.tar.gz -C /tmp&lt;/pre&gt;
&lt;p&gt;When I skipped a few steps and went into the &lt;code&gt;chroot&lt;/code&gt;, I got this:&lt;/p&gt;
&lt;pre&gt;# /tmp/root.x86_64/bin/arch-chroot /tmp/root.x86_64/
==&amp;gt; WARNING: /mnt/archlinux/root.x86_64/ is not a mountpoint. This may have undesirable side effects.&lt;/pre&gt;
&lt;p&gt;I &lt;a href="https://bugs.archlinux.org/task/46169"&gt;understood&lt;/a&gt; that the &lt;code&gt;chroot&lt;/code&gt; should be a mount point:&lt;/p&gt;
&lt;pre&gt;# mount --bind /tmp/root.x86_64 /tmp/root.x86_64
# /tmp/root.x86_64/bin/arch-chroot /tmp/root.x86_64/&lt;/pre&gt;
&lt;p&gt;And the &lt;code&gt;chroot&lt;/code&gt; worked without any warnings. To clarify the shell I am
running I will prefix the commands with &lt;code&gt;[chroot] #&lt;/code&gt; from here on:&lt;/p&gt;
&lt;pre&gt;[chroot] # pacman-key --init
[chroot] # pacman-key --populate archlinux&lt;/pre&gt;
&lt;p&gt;After editing the mirror list outside of the &lt;code&gt;chroot&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;$ sudoedit /tmp/root.x86_64/etc/pacman.d/mirrorlist&lt;/pre&gt;
&lt;p&gt;I updated the bootstrap:&lt;/p&gt;
&lt;pre&gt;[chroot] # pacman -Syyu&lt;/pre&gt;
&lt;p&gt;And mounted the partitions to be bootstrapped:&lt;/p&gt;
&lt;pre&gt;[chroot] # mount /dev/nvme0n1p5 /mnt
[chroot] # mount /dev/nvme0n1p4 /mnt/home
[chroot] # genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
[chroot] # umount /mnt/home&lt;/pre&gt;
&lt;aside class="m-note m-info"&gt;
In preparation, I had created these partitions by shrinking the existing ones
with a &lt;a href="https://distrowatch.com/table.php?distribution=gparted"&gt;GParted&lt;/a&gt; USB live medium, long time ago.  The home partition was also
created and made separate such that it can be shared between Ubuntu and Arch
Linux for a dual-boot setup.&lt;/aside&gt;
&lt;p&gt;and installed some essentials:&lt;/p&gt;
&lt;pre&gt;[chroot] # pacman -S base base-devel
:: There are 24 members in group base-devel:
:: Repository core
   1) autoconf  2) automake  3) binutils  4) bison  5) fakeroot  6) file
   7) findutils  8) flex  9) gawk  10) gcc  11) gettext  12) grep  13) groff
   14) gzip  15) libtool  16) m4 17) make  18) pacman  19) patch  20) pkgconf
   21) sed  22) sudo  23) texinfo  24) which
...&lt;/pre&gt;
&lt;p&gt;Did the same for the target Arch Linux partition mounted at &lt;code&gt;/mnt&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;[chroot] # pacstrap /mnt base base-devel
[chroot] # pacstrap /mnt linux-lts linux-firmware intel-ucode lsb-release&lt;/pre&gt;
&lt;p&gt;Thereafter I followed the official &lt;a href="https://wiki.archlinux.org/index.php/Installation_guide#Configure_the_system"&gt;installation guide&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;[chroot] # arch-chroot /mnt&lt;/pre&gt;
&lt;aside class="m-note m-info"&gt;
The step above runs &lt;code&gt;arch-chroot&lt;/code&gt; from within a &lt;code&gt;chroot&lt;/code&gt;. Now, I see why
Leo was so confused in Inception. Whenever in doubt, run &lt;code&gt;df&lt;/code&gt;.&lt;/aside&gt;
&lt;/section&gt;
&lt;section id="cleaning-up-and-dual-booting"&gt;
&lt;h2&gt;Cleaning up and dual booting&lt;/h2&gt;
&lt;p&gt;Exit the &lt;code&gt;chroot&lt;/code&gt; and unmount everything:&lt;/p&gt;
&lt;pre&gt;[chroot in a chroot] # exit
[chroot] # exit
# umount -R /tmp/root.x86_64&lt;/pre&gt;
&lt;p&gt;The Ubuntu installation came with a &lt;a href="https://wiki.archlinux.org/index.php/GRUB#Detecting_other_operating_systems"&gt;GRUB&lt;/a&gt; boot loader and &lt;code&gt;os-loader&lt;/code&gt; package
which should detect the new Arch Linux installation (since we installed the
&lt;code&gt;lsb-release&lt;/code&gt; package). To make it happen, reboot? from Ubuntu run:&lt;/p&gt;
&lt;pre&gt;# sudo update-grub&lt;/pre&gt;
&lt;p&gt;That did not work! &lt;a href="https://askubuntu.com/questions/111085/how-do-i-hide-the-grub-menu-showing-up-at-the-beginning-of-boot"&gt;Turns out&lt;/a&gt; &lt;code&gt;/etc/default/grub&lt;/code&gt; had two offending lines:&lt;/p&gt;
&lt;pre&gt;GRUB_TIMEOUT_STYLE=hidden
GRUB_DISABLE_OS_PROBER=true&lt;/pre&gt;
&lt;p&gt;which when commented out, it started working. Follow this by &lt;code&gt;update-grub&lt;/code&gt; or
&lt;code&gt;grub-mkconfig -o /boot/grub/grub.cfg&lt;/code&gt; and it is good to go.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="epilogue-some-personal-choices"&gt;
&lt;h2&gt;Epilogue: some personal choices&lt;/h2&gt;
&lt;p&gt;What follows below are not necessary but I note it down for future reference.
Here are the packages I chose to install:&lt;/p&gt;
&lt;pre&gt;neovim vim code  # editors
plasma kdegraphics-thumbnailers # KDE desktop meta package
konsole
acpi
inetutils  # many network commands, including hostname
openssh
parted  # partitioning tool
xonsh zsh # alternatives to bash
tlp  # CPU and FAN governor
man-db  # man pages
arch-wiki-docs  # provides wiki-search
arch-wiki-lite  # and wiki-search-html commands
ttf-joypixels ttf-roboto adobe-source-sans-pro-fonts adobe-source-serif-pro-fonts ttf-arphic-uming terminus-font  # extra fonts
libreoffice-fresh  # writer, calc, impress...
gcc-fortran gcc-go rust  # compilers
pacman-contrib reflector  # pacman utilities
firefox thunderbird zeal okular ark nextcloud-client mplayer  # ... and more applications
flatpak  # for sandboxing non-free applications&lt;/pre&gt;
&lt;p&gt;An AUR helper:&lt;/p&gt;
&lt;pre&gt;$ git clone https://aur.archlinux.org/yay.git
$ cd yay &amp;amp;&amp;amp; makepkg -s
# pacman -U /home/avmo/.cache/makepkg/yay-*&lt;/pre&gt;
&lt;p&gt;Check and activate periodic &lt;a href="https://wiki.archlinux.org/index.php/Solid_state_drive#TRIM"&gt;TRIM&lt;/a&gt; for long-term performance:&lt;/p&gt;
&lt;pre&gt;$ lsblk --discard
NAME        DISC-ALN DISC-GRAN DISC-MAX DISC-ZERO
nvme0n1            0      512B       2T         0
|-nvme0n1p1        0      512B       2T         0
|-nvme0n1p2        0      512B       2T         0
|-nvme0n1p3        0      512B       2T         0
|-nvme0n1p4        0      512B       2T         0
|-nvme0n1p5        0      512B       2T         0
`-nvme0n1p6        0      512B       2T         0

# systemctl enable fstrim.timer
Created symlink /etc/systemd/system/timers.target.wants/fstrim.timer → /usr/lib/systemd/system/fstrim.timer.&lt;/pre&gt;
&lt;p&gt;Format a &lt;a href="https://wiki.archlinux.org/index.php/Swap"&gt;swap&lt;/a&gt; partition in the empty space available and mount it with &lt;a href="https://wiki.archlinux.org/index.php/Solid_state_drive#TRIM"&gt;TRIM&lt;/a&gt;
(&lt;code&gt;discard&lt;/code&gt;) support:&lt;/p&gt;
&lt;pre&gt;# parted /dev/nvme0n1
GNU Parted 3.3
Using /dev/nvme0n1
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) print
Model: KXG60ZNV512G NVMe TOSHIBA 512GB (nvme)
Disk /dev/nvme0n1: 512GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name                  Flags
 1      1049kB  819MB   818MB   fat32        EFI system partition  boot, esp
 2      819MB   6188MB  5369MB  fat32        Basic data partition  msftres
 3      6188MB  140GB   134GB   ext4
 4      194GB   301GB   107GB   btrfs
 5      405GB   512GB   107GB   ext4

(parted) mkpart primary linux-swap 140GB 194GB
(parted) print
Model: KXG60ZNV512G NVMe TOSHIBA 512GB (nvme)
Disk /dev/nvme0n1: 512GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system     Name                  Flags
 1      1049kB  819MB   818MB   fat32           EFI system partition  boot, esp
 2      819MB   6188MB  5369MB  fat32           Basic data partition  msftres
 3      6188MB  140GB   134GB   ext4
 6      140GB   194GB   53.7GB  linux-swap(v1)  primary
 4      194GB   301GB   107GB   btrfs
 5      405GB   512GB   107GB   ext4

(parted) quit
# mkswap /dev/nvme0n1p6
Setting up swapspace version 1, size = 50 GiB (53687087104 bytes)
no label, UUID=6ce1daf4-6a66-44a8-a14b-bd4ea3eb9c40
# swapon --discard
# echo &amp;quot;UUID=6ce1daf4-6a66-44a8-a14b-bd4ea3eb9c40 none swap defaults,discard 0 0&amp;quot; &amp;gt;&amp;gt; /etc/fstab&lt;/pre&gt;
&lt;p&gt;Installed an alternative shell (as listed in &lt;code&gt;/etc/shells&lt;/code&gt;) and added myself
as a user:&lt;/p&gt;
&lt;pre&gt;# useradd --no-create-home --uid 1001 --user-group avmo --shell /usr/bin/xonsh
# passwd avmo&lt;/pre&gt;
&lt;p&gt;Then to make the desktop and essential components appear:&lt;/p&gt;
&lt;pre&gt;# systemctl enable sddm NetworkManager tlp&lt;/pre&gt;
&lt;p&gt;Configure sensors from &lt;code&gt;lm_sensors&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;# sensors-detect
# sensors
Adapter: ISA adapter
Package id 0:  +45.0°C  (high = +100.0°C, crit = +100.0°C)
Core 0:        +45.0°C  (high = +100.0°C, crit = +100.0°C)
Core 1:        +44.0°C  (high = +100.0°C, crit = +100.0°C)
Core 2:        +44.0°C  (high = +100.0°C, crit = +100.0°C)
Core 3:        +47.0°C  (high = +100.0°C, crit = +100.0°C)
Core 4:        +42.0°C  (high = +100.0°C, crit = +100.0°C)
Core 5:        +42.0°C  (high = +100.0°C, crit = +100.0°C)

dell_smm-virtual-0
Adapter: Virtual device
fan1:        2288 RPM
fan2:        2317 RPM

pch_cannonlake-virtual-0
Adapter: Virtual device
temp1:        +55.0°C

acpitz-acpi-0
Adapter: ACPI interface
temp1:        +25.0°C  (crit = +107.0°C)

iwlwifi-virtual-0
Adapter: Virtual device
temp1:        +48.0°C

BAT0-acpi-0
Adapter: ACPI interface
in0:          12.80 V
curr1:       1000.00 uA&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="nvidia"&gt;
&lt;h2&gt;Nvidia&lt;/h2&gt;
&lt;p&gt;The riskiest part, IMHO, although it is well &lt;a href="https://wiki.archlinux.org/index.php/NVIDIA"&gt;documented&lt;/a&gt;. The driver package
depends on the GPU model and the kernel. Thankfully no kernel panic occurred by
installing:&lt;/p&gt;
&lt;pre&gt;# pacman -S nvidia xorg-xrandr&lt;/pre&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;If anything goes wrong, it often helped by simply clearing up
&lt;code&gt;/etc/X11/xorg.conf.d&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;section id="option-1-nvidia-alone"&gt;
&lt;h3&gt;Option 1: Nvidia alone&lt;/h3&gt;
&lt;p&gt;Tried:&lt;/p&gt;
&lt;pre&gt;# nvidia-xconfig&lt;/pre&gt;
&lt;p&gt;However, SDDM did not start when X server was configured to use &lt;code&gt;nvidia&lt;/code&gt;
display driver. The key was to run some commands &lt;a href="https://wiki.archlinux.org/index.php/NVIDIA_Optimus#SDDM"&gt;before SDDM&lt;/a&gt; starts, with
the following lines in &lt;code&gt;/usr/share/sddm/scripts/Xsetup&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="m-code"&gt;xrandr --setprovideroutputsource modesetting NVIDIA-0
xrandr --auto&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="option-2-optimus-prime"&gt;
&lt;h3&gt;Option 2: Optimus Prime&lt;/h3&gt;
&lt;p&gt;After reading a bit more, I chose NOT to do Option 1, but instead go for
&lt;a href="https://wiki.archlinux.org/index.php/NVIDIA_Optimus#Using_PRIME_render_offload"&gt;switchable&lt;/a&gt; graphics. The following package provides a &lt;code&gt;prime-run&lt;/code&gt; command
and a X server configuration:&lt;/p&gt;
&lt;pre&gt;# pacman -S nvidia-prime&lt;/pre&gt;
&lt;p&gt;Rebooted and verified it:&lt;/p&gt;
&lt;pre&gt;$ xrandr --listproviders
Providers: number : 2
Provider 0: id: 0x48 cap: 0xf, Source Output, Sink Output, Source Offload, Sink Offload crtcs: 3 outputs: 6 associated providers: 0 name:modesetting
Provider 1: id: 0x2a3 cap: 0x0 crtcs: 0 outputs: 0 associated providers: 0 name:NVIDIA-G0

# pacman -S mesa-demos
$ prime-run glxinfo | grep OpenGL&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="finally"&gt;
&lt;h3&gt;Finally&lt;/h3&gt;
&lt;p&gt;There was a small &lt;a href="https://bbs.archlinux.org/viewtopic.php?id=251919"&gt;hiccup&lt;/a&gt; in detecting the external HDMI monitor. Turns out it
was &lt;a href="https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/nvidia-utils&amp;amp;id=65ce50c4fd7388e91987cd2d271881e4ae126902"&gt;regression&lt;/a&gt; due to a change in &lt;code&gt;nvidia-utils&lt;/code&gt;. It was fixed by adding
back the line:&lt;/p&gt;
&lt;pre&gt;Option &amp;quot;PrimaryGPU&amp;quot; &amp;quot;yes&amp;quot;&lt;/pre&gt;
&lt;p&gt;to &lt;code&gt;/usr/share/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="cuda"&gt;
&lt;h2&gt;CUDA&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://wiki.archlinux.org/index.php/GPGPU#CUDA"&gt;Installation&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;# pacman -S cuda&lt;/pre&gt;
&lt;p&gt;Testing:&lt;/p&gt;
&lt;pre&gt;$ cp -r /opt/cuda/samples/ .
$ cd samples/1_Utilities/deviceQuery
$ make
$ ./deviceQuery
./deviceQuery Starting...

 CUDA Device Query (Runtime API) version (CUDART static linking)

Detected 1 CUDA Capable device(s)

Device 0: &amp;quot;Quadro RTX 3000&amp;quot;
  CUDA Driver Version / Runtime Version          10.2 / 10.2
  CUDA Capability Major/Minor version number:    7.5
  Total amount of global memory:                 5935 MBytes (6222839808 bytes)
  (30) Multiprocessors, ( 64) CUDA Cores/MP:     1920 CUDA Cores
  GPU Max Clock rate:                            1380 MHz (1.38 GHz)
  Memory Clock rate:                             7001 Mhz
  Memory Bus Width:                              192-bit
  L2 Cache Size:                                 3145728 bytes
  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)
  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers
  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers
  Total amount of constant memory:               65536 bytes
  Total amount of shared memory per block:       49152 bytes
  Total number of registers available per block: 65536
  Warp size:                                     32
  Maximum number of threads per multiprocessor:  1024
  Maximum number of threads per block:           1024
  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)
  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)
  Maximum memory pitch:                          2147483647 bytes
  Texture alignment:                             512 bytes
  Concurrent copy and kernel execution:          Yes with 3 copy engine(s)
  Run time limit on kernels:                     Yes
  Integrated GPU sharing Host Memory:            No
  Support host page-locked memory mapping:       Yes
  Alignment requirement for Surfaces:            Yes
  Device has ECC support:                        Disabled
  Device supports Unified Addressing (UVA):      Yes
  Device supports Compute Preemption:            Yes
  Supports Cooperative Kernel Launch:            Yes
  Supports MultiDevice Co-op Kernel Launch:      Yes
  Device PCI Domain ID / Bus ID / location ID:   0 / 1 / 0
  Compute Mode:
     &amp;lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &amp;gt;

deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1
Result = PASS&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="docker"&gt;
&lt;h2&gt;Docker&lt;/h2&gt;
&lt;p&gt;Installing &lt;a href="https://wiki.archlinux.org/index.php/Docker#Installation"&gt;docker&lt;/a&gt; is straightforward, but I wanted to avoid adding my default
login into the &lt;code&gt;docker&lt;/code&gt; group which is root equivalent. So I created a
special user to do this:&lt;/p&gt;
&lt;pre&gt;# pacman -S docker
# systemctl start docker
# useradd --no-create-home -g docker docker
# passwd
$ su - docker&lt;/pre&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="software"></category><category term="linux"></category><category term="ubuntu"></category><category term="archlinux"></category></entry><entry><title>Turning Pelican into a mini-CMS</title><link href="https://ashwinvis.github.io/pelican-mini-cms.html" rel="alternate"></link><published>2020-01-02T14:12:41+01:00</published><updated>2020-01-02T14:12:41+01:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-01-02:/pelican-mini-cms.html</id><summary type="html">&lt;p&gt;Lowering writing inhibitions with tech&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I like automating things. This means I write small nifty tools to do
boring / repetitive stuff for me. I have been relying on &lt;a href="https://pelican.readthedocs.io/"&gt;static site
generator Pelican&lt;/a&gt; for my website. I
do go an extra mile from the usual workflow.&lt;/p&gt;
&lt;p&gt;For this blog, I wanted to keep the source code and generated output
separate. A way to do that was to use git branches to &lt;code&gt;develop&lt;/code&gt;
content and publish the output on the &lt;code&gt;master&lt;/code&gt; branch. While in theory
this sounds nice, it becomes cumbersome to manage two copies of the same
repository locally. The solution was CI.&lt;/p&gt;
&lt;section id="stage-1-ci"&gt;
&lt;h2&gt;Stage 1: CI&lt;/h2&gt;
&lt;p&gt;This very blog is automatically published on GitHub pages every time I
push some text to GitHub, specifically on the &lt;code&gt;develop&lt;/code&gt; branch. As a
result, I don’t have to remember to activate the Python virtual
environment, run a Makefile, commit output to another branch
(&lt;code&gt;master&lt;/code&gt;) etc.&lt;/p&gt;
&lt;p&gt;I used to do this with Travis CI and ever since GitHub actions rolled
out, I have been using the latter as it is noticeably faster. Snippets
of the configuration files that I used are shown below.&lt;/p&gt;
&lt;section id="travis-ci-configuration"&gt;
&lt;h3&gt;&lt;a href="https://github.com/ashwinvis/ashwinvis.github.io/blob/19.11/.travis.yml"&gt;Travis CI configuration&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="m-code"&gt;&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;

&lt;span class="nn"&gt;...&lt;/span&gt;

&lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pelican-themes -i pelican-bluedrop/bluedrop&lt;/span&gt;

&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cd src&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make publish&lt;/span&gt;

&lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pages&lt;/span&gt;
  &lt;span class="nt"&gt;skip-cleanup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
  &lt;span class="nt"&gt;github-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$GITHUB_TOKEN&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;keep-history&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
  &lt;span class="nt"&gt;target-branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Travis CI&lt;/span&gt;
  &lt;span class="nt"&gt;local-dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;./output&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;develop&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;An extra step you have to do is to generate a personal access token,
&lt;code&gt;`GITHUB_TOKEN&lt;/code&gt; &amp;lt;&lt;a href="https://github.com/settings/tokens"&gt;https://github.com/settings/tokens&lt;/a&gt;&amp;gt;`__ for Travis to
get permissions. Then, you save the token as a secret environment
variable in Travis. The process is &lt;a href="https://docs.travis-ci.com/user/deployment/pages/"&gt;nicely
documented&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="github-actions-workflow"&gt;
&lt;h3&gt;&lt;a href="https://github.com/ashwinvis/ashwinvis.github.io/blob/19.11/.github/workflows/publish.yml"&gt;GitHub actions workflow&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="m-code"&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Publish pelican website&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;PIP_CACHE_DIR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/.cache/pip&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;max-parallel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;4&lt;/span&gt;
      &lt;span class="nt"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3.7&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;

    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy to GitHub Pages&lt;/span&gt;
      &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;success()&lt;/span&gt;
      &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;ACTIONS_DEPLOY_KEY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span&gt;
        &lt;span class="nt"&gt;PUBLISH_BRANCH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
        &lt;span class="nt"&gt;PUBLISH_DIR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./output&lt;/span&gt;
        &lt;span class="nt"&gt;SCRIPT_MODE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
        &lt;span class="no"&gt;wget https://raw.githubusercontent.com/peaceiris/actions-gh-pages/v2.5.0/entrypoint.sh&lt;/span&gt;
        &lt;span class="no"&gt;bash ./entrypoint.sh&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here we use a &lt;a href="https://github.com/peaceiris/actions-gh-pages"&gt;third-party
action&lt;/a&gt; created to
deploy generated files to GitHub pages. We may not want to give too many
permissions here (i.e. access to all repositories as we did with
Travis!). Therefore a deploy key was generated from
&lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io/settings/keys&lt;/code&gt;
instead.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="stage-2-templating"&gt;
&lt;h2&gt;Stage 2: Templating&lt;/h2&gt;
&lt;p&gt;Pelican posts require some
&lt;a href="https://pelican.readthedocs.io/en/stable/content.html#file-metadata"&gt;metadata&lt;/a&gt;
for the posts to be acceptable. Some (title, date) are mandatory while
the rest are optional. I wanted the process of writing a new post to be
as fluid as possible.
I started by keeping a &lt;a href="https://github.com/ashwinvis/ashwinvis.github.io/blob/19.11/src/content/template.md"&gt;simple markdown file with dummy
metadata&lt;/a&gt;.
Then I would copy this file, and manually edit the metadata before
authoring the post. As you can imagine, I was not pleased by this
approach!
Now I have come up with a better approach. The result was a Jinja template +
interactive TUI workflow which creates a post stub, save it with the right
filename, opens my editor, commits and pushes it! &lt;a href="https://github.com/ashwinvis/ashwinvis.github.io/blob/develop/templates/post.md.j2"&gt;The template&lt;/a&gt;
looks as follows:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;metadata&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;---&lt;/span&gt;
&lt;span class="x"&gt;Title: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;Author: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;author&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;Date: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;Status: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;status&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;Summary: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;summary&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;Category: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;category&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;Tags: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;---&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;I did not want to build the TUI from the scratch. Therefore I borrowed
the &lt;code&gt;prompt&lt;/code&gt; module from &lt;a href="https://cookiecutter.readthedocs.io/en/1.7.0/cookiecutter.html#module-cookiecutter.prompt"&gt;the cookiecutter project&lt;/a&gt;
to do it for me. I save some defaults in a &lt;code&gt;cookiecutter.json&lt;/code&gt; file,
based on which the metadata values are prompted from the user
conveniently as follows:&lt;/p&gt;
&lt;pre class="m-code"&gt;title &lt;span class="o"&gt;[&lt;/span&gt;Insert title&lt;span class="o"&gt;]&lt;/span&gt;: Turning Pelican into a mini-CMS
summary &lt;span class="o"&gt;[]&lt;/span&gt;: Lowering writing inhibitions with tech
Select category:
&lt;span class="m"&gt;1&lt;/span&gt; - Blog
&lt;span class="m"&gt;2&lt;/span&gt; - Tech Talk
Choose from &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;2&lt;/span&gt;
Select tags:
&lt;span class="m"&gt;1&lt;/span&gt; - life
&lt;span class="m"&gt;2&lt;/span&gt; - research
&lt;span class="m"&gt;3&lt;/span&gt; - software
Choose from &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;3&lt;/span&gt;
slug &lt;span class="o"&gt;[&lt;/span&gt;turning-pelican-into-a-mini-cms&lt;span class="o"&gt;]&lt;/span&gt;: pelican-mini-cms
Select status:
&lt;span class="m"&gt;1&lt;/span&gt; - draft
&lt;span class="m"&gt;2&lt;/span&gt; - published
Choose from &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
date &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-01-02T14:12:41.803562&lt;span class="o"&gt;]&lt;/span&gt;:
author &lt;span class="o"&gt;[&lt;/span&gt;Ashwin Vishnu Mohanan&lt;span class="o"&gt;]&lt;/span&gt;:
Select filetype:
&lt;span class="m"&gt;1&lt;/span&gt; - md
&lt;span class="m"&gt;2&lt;/span&gt; - ipynb
Choose from &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;:
Track changes? &lt;span class="o"&gt;[&lt;/span&gt;True&lt;span class="o"&gt;]&lt;/span&gt;:
Commit changes? &lt;span class="o"&gt;[&lt;/span&gt;True&lt;span class="o"&gt;]&lt;/span&gt;: n
Push changes? &lt;span class="o"&gt;[&lt;/span&gt;False&lt;span class="o"&gt;]&lt;/span&gt;:&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://github.com/ashwinvis/ashwinvis.github.io/blob/develop/write.py"&gt;The script which does
this&lt;/a&gt;
is self explanatory, I hope!&lt;/p&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="software"></category><category term="ci"></category><category term="automation"></category><category term="devops"></category></entry><entry><title>Licensing software to be permissive</title><link href="https://ashwinvis.github.io/licensing-software.html" rel="alternate"></link><published>2019-12-21T00:00:00+01:00</published><updated>2019-12-21T00:00:00+01:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2019-12-21:/licensing-software.html</id><summary type="html">&lt;p&gt;Considerations while selecting a permissive license for your open-source project.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A while back we were discussing changing the license of
&lt;a href="https://transonic.rtfd.io"&gt;transonic&lt;/a&gt; from CeCILL-B to a more recognizable,
but still permissive license. We would soon make that move. The
most obvious candidate was the 3-clause BSD license and I suggested Apache 2.0
as an alternative, due to the potential benefits.&lt;/p&gt;
&lt;p&gt;Then I saw this:&lt;/p&gt;
&lt;iframe src="https://fosstodon.org/@chris/101733810026327049/embed" class="mastodon-embed" style="max-width: 100%; border: 0" height="320em" width="100%" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;

&lt;p&gt;Being a licensing nerd, I found this &lt;a href="https://writing.kemitchell.com/2019/03/09/Deprecation-Notice.html"&gt;amusing
piece&lt;/a&gt;
informative on why everyone should avoid MIT and BSD. Patents and ambiguity.
The article also links to &lt;a href="https://writing.kemitchell.com/2016/09/21/MIT-License-Line-by-Line.html"&gt;verbose explanation of what the MIT license actually
means&lt;/a&gt;,
along with this warning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a result, the shortness of MIT and BSD are reassuring only until you
actually try to understand them, and find you need a decoder ring. The terms
are actually dangerous if you read them without knowing you need that decoder
ring, believing you see the whole picture, which often turns out to be just
the picture you wanted to see.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A friend of mine had used the MIT license a while ago, commenting that he
understood every word of it! Well, did he?!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;My arguments &lt;em&gt;in favour of&lt;/em&gt; Apache 2.0 were as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I don't think Apache 2.0 makes any demand from users of transonic or
   vice-versa. It is
   &lt;a href="https://softwareengineering.stackexchange.com/questions/40561/is-bsd-license-compatible-with-apache"&gt;compatible with BSD too&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To quote the license itself from section 1, it makes it adequately clear
   what &lt;em&gt;derivative works&lt;/em&gt; are:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;For the purposes of this License, Derivative Works shall not include works
that remain separable from, or merely link (or bind by name) to the
interfaces of, the Work and Derivative Works thereof.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.oreilly.com/library/view/understanding-open-source/0596005814/ch02.html"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The key aspect of Apache 2.0 is it &lt;a href="https://snyk.io/blog/mit-apache-bsd-fairest-of-them-all/"&gt;protects developers from patent
   lawsuits&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Indeed something more easier to read, but legally sound would be nice, like Blue Oak.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Don't use the Blue Oak license ... yet. Once it is approved / vetted
by &lt;a href="https://www.gnu.org/licenses/license-list.html"&gt; GNU &lt;/a&gt; and
&lt;a href="https://opensource.org/licenses"&gt; OSI &lt;/a&gt; we can start using it. I seems like a
good license, but I am no expert, and most likely you are not too. Unfamiliar
licenses slows down contributions and use of software.  It is listed on &lt;a href="https://spdx.org/licenses/BlueOak-1.0.0.html"&gt; SPDX
&lt;/a&gt; though!&lt;/p&gt;</content><category term="Tech Talk"></category><category term="licensing"></category><category term="open-source"></category></entry><entry><title>At PyCon Sweden 2019</title><link href="https://ashwinvis.github.io/pyconse2019.html" rel="alternate"></link><published>2019-10-31T00:00:00+01:00</published><updated>2019-12-01T00:00:00+01:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2019-10-31:/pyconse2019.html</id><summary type="html">&lt;p&gt;Representing Transonic&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am attending &lt;a href="http://pycon.se"&gt;PyCon Sweden 2019&lt;/a&gt; at Stockholm where I am presenting &lt;a href="https://transonic.rtfd.io"&gt;Transonic&lt;/a&gt;.
Do check out the slides for my presentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://cicero.xyz/v3/remark/0.14.0/github.com/ashwinvis/talks/master/pyconse2019/talk.md/#1"&gt;Make your Python code fly at transonic speeds!&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don't miss the links to Binder demo and further reading at the final slide.&lt;/p&gt;
&lt;h2 id="update"&gt;&lt;a class="toclink" href="#update"&gt;Update&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The video of the talk is out! Watch it:&lt;/p&gt;
&lt;iframe id='ivplayer' type='text/html' width='640' height='360' src='https://invidio.us/embed/donHrISOO-w' frameborder='0'&gt;&lt;/iframe&gt;

&lt;p&gt;Alt: &lt;a href="https://www.youtube.com/watch?v=donHrISOO-w"&gt;Youtube link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="rewind-of-my-experience"&gt;&lt;a class="toclink" href="#rewind-of-my-experience"&gt;Rewind of my experience&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I got to meet a lot of great like-minded people in those two days! It is no
easy task to list all whom I met and convey my regards. Therefore, I list the
videos and slides which might be of interest to you as a reader:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/consideRatio"&gt;Erik Sundell&lt;/a&gt; who works for both &lt;em&gt;Jupyterhub&lt;/em&gt;
  and his company shared his insights on how one can setup Jupyter with
  multiple user deployments on a &lt;a href="https://tljh.jupyter.org/"&gt;single server&lt;/a&gt; or
  on &lt;a href="https://ztjh.jupyter.org/"&gt;the cloud&lt;/a&gt;. &lt;a href="https://invidio.us/watch?v=Epx4P6YCgTo"&gt;[video]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gavincyi/pycon-presentation/"&gt;Gavin Chan&lt;/a&gt; who compared &lt;em&gt;Cython and Pybind11&lt;/em&gt;
   in his talk. &lt;a href="https://invidio.us/watch?v=ZRKjoUALmwk"&gt;[video]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/isaacbernat/presentations/"&gt;Isaac Bernat&lt;/a&gt; showed us that
  &lt;em&gt;algorithmic&lt;/em&gt; improvements go a long way, indeed! &lt;a href="https://invidio.us/watch?v=asZ0SDTKqvM"&gt;[video]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There were also really educative talks on
&lt;a href="https://invidio.us/watch?v=EX4YsevmZBg"&gt;asyncio&lt;/a&gt;, &lt;a href="https://invidio.us/watch?v=MKf6KfdTems"&gt;property based
testing&lt;/a&gt;
&lt;a href="https://slides.com/hultner/pycon-se-2019"&gt;[slides]&lt;/a&gt; and &lt;a href="https://invidio.us/watch?v=fZwB1gQBwnU"&gt;mutation
testing&lt;/a&gt;, plus a sizable representation
from the data science community. A couple of fun projects such as the
&lt;a href="https://www.brachiograph.art/"&gt;a plotting DIY tool made using Python + Raspberry Pi Zero,
BrachioGraph&lt;/a&gt; and a &lt;a href="https://invidio.us/watch?v=o8Un1w30IDk"&gt;really hacky self-documenting
code&lt;/a&gt;. See the &lt;a href="https://invidio.us/channel/UCH_2cuWzFMyCPvm75lJJ6wg"&gt;PyCon Sweden video
channel&lt;/a&gt; for the whole
programme.&lt;/p&gt;
&lt;p&gt;Last but not the least, I am thankful to the whole PyCon Sweden team for
selflessly devoting their time into organizing a great conference - twice as
large compared to last year. It was quite insightful to learn from the
&lt;a href="https://www.linkedin.com/in/anna-kazakova-lindegren-154b63b/"&gt;chair&lt;/a&gt; that organizing the conference is a
tightrope walk with a good fraction of ticket sales occurring towards the last
week and booking the venue has numerous constraints! Hats off!&lt;/p&gt;
&lt;h2 id="epilogue"&gt;&lt;a class="toclink" href="#epilogue"&gt;Epilogue&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As for my talk, I believe I did my part. Judging from my interaction, it
seemed that a lot of folks were oblivious to fact that &lt;code&gt;numpy&lt;/code&gt; is not so fast
for CPU-bound problems. I received some interesting questions as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add some nice fluid dynamics visualizations?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is a video on my &lt;a href="/pages/software.html"&gt;Software&lt;/a&gt; page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you use std. library &lt;code&gt;typing&lt;/code&gt; for type annotations? Say for lists and
dictionaries etc. This would allow for compatibility with &lt;code&gt;mypy&lt;/code&gt; and later on
&lt;code&gt;mypyc&lt;/code&gt; when it is ready.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is seriously followed up as a &lt;a href="https://github.com/fluiddyn/transonic/issues/9"&gt;possible
enhancement&lt;/a&gt; to &lt;code&gt;transonic&lt;/code&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you accelerate Pandas?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/fluiddyn/transonic-demos/blob/master/pandas.ipynb"&gt;It seems to be
possible&lt;/a&gt;,
especially when you follow functional programming style.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you accelerate OpenCV code?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a hard one. Of course, if you are dealing with images which are
read as &lt;code&gt;numpy&lt;/code&gt; arrays, it is possible. I haven't seen any Python extensions
written (in Cython or other) to accelerate OpenCV code and even if it does
exist, &lt;code&gt;transonic&lt;/code&gt; is not designed to interface with libraries. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can Pythran replace Cython / f2py for interfacing with native code? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pythran does sound like Fortran, but it has nothing much in common - except the
fact that Pythran and Fortran target scientific computing and HPC. Generally
speaking, Pythran is meant to extend not interface.&lt;/p&gt;
&lt;p&gt;However, Pythran can do some useful things such as generate C++ only code, free
from any runtime Python dependencies (using &lt;code&gt;-e&lt;/code&gt; argument) or even &lt;a href="https://serge-sans-paille.github.io/pythran-stories/the-capsule-corporation.html"&gt;export
capsules&lt;/a&gt;
which is compatible with
&lt;a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.LowLevelCallable.html"&gt;&lt;code&gt;scipy.LowLevelCallable&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-journey-continues"&gt;&lt;a class="toclink" href="#the-journey-continues"&gt;The journey continues ...&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As developers of project &lt;code&gt;transonic&lt;/code&gt;, we are hoping that you would try out the
project and adopt it in your personal scripts, notebooks and possibly in
packages that you develop. If you found &lt;code&gt;transonic&lt;/code&gt; useful, help us, encourage
us, by &lt;a href="https://github.com/fluiddyn/transonic"&gt;starring the project on GitHub&lt;/a&gt;
and &lt;a href="https://framaforms.org/transonic-declaration-of-interest-and-feedback-1570969704"&gt;sharing your
experience&lt;/a&gt;
with us.&lt;/p&gt;</content><category term="Tech Talk"></category><category term="python"></category><category term="fluiddyn"></category><category term="transonic"></category><category term="pyconse"></category></entry><entry><title>Diversity amongst Python interpreters</title><link href="https://ashwinvis.github.io/diversity-amongst-python-interpreters.html" rel="alternate"></link><published>2019-08-06T00:00:00+02:00</published><updated>2019-08-06T00:00:00+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2019-08-06:/diversity-amongst-python-interpreters.html</id><summary type="html">&lt;p&gt;We now have multiple Python interpreters and let’s see what is in store.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Whenever we mention Python, we are mostly talking about the reference
implementation CPython. CPython is a great project, but it is important
to take stock of other implementations which are good alternatives and
have some advantages. I only list the active projects below, as of 2019:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypy.org/"&gt;PyPy&lt;/a&gt; or rpython: nearly complete compliance
with Python 3.5 and 3.6 standard library, faster&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustpython.github.io/demo/"&gt;RustPython&lt;/a&gt;: the newest kid
in the block. Can be compiled to WebAssembly. Potentially we might
get Rust’s memory management as garbage collectors.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/graalvm/graalpython"&gt;GraalPython&lt;/a&gt;: based on
Java GraalVM with a goal to support Python’s standard library and
scientific ecosystem.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jython.org/"&gt;Jython&lt;/a&gt;: embeds Java in Python 2.7&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ironpython.net/"&gt;IronPython&lt;/a&gt;: embeds .NET frameworks in
Python 2.7&lt;/li&gt;
&lt;li&gt;&lt;a href="https://micropython.org/"&gt;MicroPython&lt;/a&gt; and
&lt;a href="https://circuitpython.org/"&gt;CircuitPython&lt;/a&gt;: Python runtime and
compiler for microcontrollers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize there are three motivations behind these projects. To make
Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easier to embed in other environments (browser, microcontrollers)&lt;/li&gt;
&lt;li&gt;integrated with other languages&lt;/li&gt;
&lt;li&gt;improve performance (removing GIL, adding JIT, faster eval)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There were some discussion on reducing &lt;a class="m-footnote" href="#id5" id="id1"&gt;1&lt;/a&gt;, reusing &lt;a class="m-footnote" href="#id6" id="id2"&gt;2&lt;/a&gt;,
reorganising &lt;a class="m-footnote" href="#id7" id="id3"&gt;3&lt;/a&gt;, the standard libraries and even rewriting the
standard library as pure-Python modules &lt;a class="m-footnote" href="#id8" id="id4"&gt;4&lt;/a&gt;. It is nice that such
conversations are happenning as they can move the code base and sister
projects forward by getting rid of baggage, not doing wheel reinventing
and not breaking compatibility.&lt;/p&gt;
&lt;p&gt;If there is anything I would like to see, it is more it is…&lt;/p&gt;
&lt;section id="performance"&gt;
&lt;h2&gt;Performance!&lt;/h2&gt;
&lt;p&gt;Note that it is possible to get really good performance with CPython by
writing extensions using Pythran, Numba etc. Let’s see if how much
faster can these alternate implementations be, based on a naive
benchmark, loop hundred million times, and do nothing.&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100_000_000&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;and a &lt;a href="https://pymotw.com/2/itertools/"&gt;slightly more efficient
looping&lt;/a&gt;&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt;

&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100_000_000&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;&lt;/pre&gt;
&lt;section id="cpython"&gt;
&lt;h3&gt;CPython&lt;/h3&gt;
&lt;pre class="m-code"&gt;%%bash
&lt;span class="nb"&gt;time&lt;/span&gt; python -c &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;N = 100_000_000&lt;/span&gt;
&lt;span class="s1"&gt;for i in range(N):&lt;/span&gt;
&lt;span class="s1"&gt;    pass&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;real        0m3.232s
user        0m3.231s
sys 0m0.000s&lt;/pre&gt;
&lt;pre class="m-code"&gt;%%bash
&lt;span class="nb"&gt;time&lt;/span&gt; python -c &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;from itertools import repeat&lt;/span&gt;

&lt;span class="s1"&gt;N = 100_000_000&lt;/span&gt;
&lt;span class="s1"&gt;for _ in repeat(None, N):&lt;/span&gt;
&lt;span class="s1"&gt;    pass&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;real        0m2.233s
user        0m2.233s
sys 0m0.000s&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="pypy"&gt;
&lt;h3&gt;PyPy&lt;/h3&gt;
&lt;pre class="m-code"&gt;%%bash
&lt;span class="nb"&gt;time&lt;/span&gt; pypy3 -c &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;N = 100_000_000&lt;/span&gt;
&lt;span class="s1"&gt;for i in range(N):&lt;/span&gt;
&lt;span class="s1"&gt;    pass&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;real        0m0.433s
user        0m0.183s
sys 0m0.020s&lt;/pre&gt;
&lt;pre class="m-code"&gt;%%bash
&lt;span class="nb"&gt;time&lt;/span&gt; pypy3 -c &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;from itertools import repeat&lt;/span&gt;

&lt;span class="s1"&gt;N = 100_000_000&lt;/span&gt;
&lt;span class="s1"&gt;for _ in repeat(None, N):&lt;/span&gt;
&lt;span class="s1"&gt;    pass&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;real        0m0.255s
user        0m0.209s
sys 0m0.021s&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="rustpython"&gt;
&lt;h3&gt;RustPython&lt;/h3&gt;
&lt;pre class="m-code"&gt;%%bash
&lt;span class="nb"&gt;time&lt;/span&gt; rustpython -c &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;N = 1000000&lt;/span&gt;
&lt;span class="s1"&gt;for i in range(N):&lt;/span&gt;
&lt;span class="s1"&gt;    pass&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;real        0m3.308s
user        0m3.297s
sys 0m0.010s&lt;/pre&gt;
&lt;pre class="m-code"&gt;%%bash
&lt;span class="nb"&gt;time&lt;/span&gt; rustpython -c &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;from itertools import repeat&lt;/span&gt;

&lt;span class="s1"&gt;N = 1000000&lt;/span&gt;
&lt;span class="s1"&gt;for _ in repeat(None, N):&lt;/span&gt;
&lt;span class="s1"&gt;    pass&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;real        0m12.876s
user        0m12.865s
sys 0m0.010s&lt;/pre&gt;
&lt;p&gt;RustPython is surpisingly slow at the moment, so we don’t do 100 million
iterations and only a million instead.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="graalpython"&gt;
&lt;h3&gt;GraalPython&lt;/h3&gt;
&lt;pre class="m-code"&gt;%%bash
&lt;span class="nb"&gt;time&lt;/span&gt; graalpython -c &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;N = 100_000_000&lt;/span&gt;
&lt;span class="s1"&gt;for i in range(N):&lt;/span&gt;
&lt;span class="s1"&gt;    pass&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;Please note: This Python implementation is in the very early stages, and can run little more than basic benchmarks at this point.

real        0m6.894s
user        0m6.829s
sys 0m0.190s&lt;/pre&gt;
&lt;pre class="m-code"&gt;%%bash
&lt;span class="nb"&gt;time&lt;/span&gt; graalpython -c &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;from itertools import repeat&lt;/span&gt;

&lt;span class="s1"&gt;N = 100_000_000&lt;/span&gt;
&lt;span class="s1"&gt;for _ in repeat(None, N):&lt;/span&gt;
&lt;span class="s1"&gt;    pass&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;Please note: This Python implementation is in the very early stages, and can run little more than basic benchmarks at this point.

real        0m5.960s
user        0m5.909s
sys 0m0.200s&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="final-comments"&gt;
&lt;h2&gt;Final comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;And the winners are…&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PyPy&lt;/li&gt;
&lt;li&gt;CPython&lt;/li&gt;
&lt;li&gt;GraalPython&lt;/li&gt;
&lt;li&gt;RustPython&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would love to use PyPy as my daily driver, but the only reason I
couldn’t do it is because I almost never manage to get packages like
numpy working. Although &lt;a href="http://packages.pypy.org/"&gt;PyPy claims
otherwise&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some eyecandy…&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is also interesting how the prompt looks :)&lt;/p&gt;
&lt;pre class="m-code"&gt;!python&lt;/pre&gt;
&lt;pre&gt;Python 3.7.4 (default, Jul 16 2019, 07:12:58)
[GCC 9.1.0] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
KeyboardInterrupt
&amp;gt;&amp;gt;&amp;gt;&lt;/pre&gt;
&lt;pre class="m-code"&gt;!pypy3&lt;/pre&gt;
&lt;pre&gt;Python 3.6.1 (784b254d669919c872a505b807db8462b6140973, May 09 2019, 13:17:30)
[PyPy 7.1.1-beta0 with GCC 8.3.0] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
Jedi is not installed, falling back to readline
And now for something completely different: ''PyPy is an exciting technology
that lets you to write fast, portable, multi-platform interpreters with less
effort''
&amp;gt;&amp;gt;&amp;gt;&amp;gt;
KeyboardInterrupt
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/pre&gt;
&lt;pre class="m-code"&gt;!rustpython&lt;/pre&gt;
&lt;pre&gt;Welcome to the magnificent Rust Python 0.1.0 interpreter 😱 🖖
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/pre&gt;
&lt;pre class="m-code"&gt;!graalpython&lt;/pre&gt;
&lt;pre&gt;Python 3.7.3 (Sat Jul 13 09:46:34 UTC 2019)
[GraalVM CE, Java 1.8.0_222] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
Please note: This Python implementation is in the very early stages, and can run little more than basic benchmarks at this point.
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="versions"&gt;
&lt;h2&gt;Versions&lt;/h2&gt;
&lt;p&gt;I have used the latest and greatest releases. For future reference:&lt;/p&gt;
&lt;pre class="m-code"&gt;%%bash
python -V
pypy3 -V
rustpython -V
graalpython -V&lt;/pre&gt;
&lt;pre&gt;Python 3.7.4
Python 3.6.1 (784b254d669919c872a505b807db8462b6140973, May 09 2019, 13:17:30)
[PyPy 7.1.1-beta0 with GCC 8.3.0]
RustPython 0.1.0
Python 3.7.3 (GraalVM CE Native 19.1.1)&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;You
can&lt;/em&gt; &lt;a href="https://raw.githubusercontent.com/ashwinvis/ashwinvis.github.io/develop/content/python_interpreters.ipynb"&gt;download&lt;/a&gt; &lt;em&gt;this
notebook, or see a static view&lt;/em&gt; &lt;a href="https://nbviewer.jupyter.org/github/ashwinvis/ashwinvis.github.io/blob/develop/content/python_interpreters.ipynb"&gt;on
nbviewer&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;dl class="m-footnote"&gt;
&lt;dt id="id5"&gt;1&lt;/a&gt;.&lt;/dt&gt;
&lt;dd&gt;&lt;span class="m-footnote"&gt;&lt;a href="#id1"&gt;^&lt;/a&gt;&lt;/span&gt; &lt;a href="https://www.python.org/dev/peps/pep-0594/"&gt;https://www.python.org/dev/peps/pep-0594/&lt;/a&gt;&lt;/dd&gt;
&lt;dt id="id6"&gt;2&lt;/a&gt;.&lt;/dt&gt;
&lt;dd&gt;&lt;span class="m-footnote"&gt;&lt;a href="#id2"&gt;^&lt;/a&gt;&lt;/span&gt; &lt;a href="https://discuss.python.org/t/re-use-of-standard-library-across-implementations/2051"&gt;https://discuss.python.org/t/re-use-of-standard-library-across-implementations/2051&lt;/a&gt;&lt;/dd&gt;
&lt;dt id="id7"&gt;3&lt;/a&gt;.&lt;/dt&gt;
&lt;dd&gt;&lt;span class="m-footnote"&gt;&lt;a href="#id3"&gt;^&lt;/a&gt;&lt;/span&gt; &lt;a href="https://doughellmann.com/blog/2019/06/29/dependencies-between-python-standard-library-modules/"&gt;https://doughellmann.com/blog/2019/06/29/dependencies-between-python-standard-library-modules/&lt;/a&gt;&lt;/dd&gt;
&lt;dt id="id8"&gt;4&lt;/a&gt;.&lt;/dt&gt;
&lt;dd&gt;&lt;span class="m-footnote"&gt;&lt;a href="#id4"&gt;^&lt;/a&gt;&lt;/span&gt; &lt;a href="https://github.com/beeware/ouroboros"&gt;https://github.com/beeware/ouroboros&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="python"></category><category term="pypy"></category><category term="rust"></category><category term="java"></category><category term="csharp"></category></entry><entry><title>REPL for your data</title><link href="https://ashwinvis.github.io/repl-for-your-data.html" rel="alternate"></link><published>2019-07-28T00:00:00+02:00</published><updated>2019-07-28T00:00:00+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2019-07-28:/repl-for-your-data.html</id><summary type="html">&lt;p&gt;Use ethical solutions. Archive your data. REPL.&lt;/p&gt;</summary><content type="html">&lt;p&gt;So we have heard this time and time again.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Data is the new oil.&lt;/li&gt;
&lt;li&gt;Surveillance capitalism.&lt;/li&gt;
&lt;li&gt;The most profitable companies on the entire planet rely on your data&lt;sup id="fnref:data"&gt;&lt;a class="footnote-ref" href="#fn:data"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;and so on. I believe the agenda for all these companies is to use data to power
their AI research. And our privacy is just a casualty in this process.  Despite
all this news and "shocking" revelations that we hear almost every day in the
news, many tend to stick around and use them, including me&lt;sup id="fnref:contra"&gt;&lt;a class="footnote-ref" href="#fn:contra"&gt;2&lt;/a&gt;&lt;/sup&gt;.  There are
solutions however. And it gets better - what I described below require almost
zero investment (except for your attention and time, of course).&lt;/p&gt;
&lt;h3 id="solutions-that-do-not-require-deep-technical-knowledge"&gt;&lt;a class="toclink" href="#solutions-that-do-not-require-deep-technical-knowledge"&gt;Solutions that do not require deep technical knowledge&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Jump ship to the new wave of &lt;a href="https://fediverse.party"&gt;decentralized social
   networks, which are collectively called
   Fediverse&lt;/a&gt;&lt;sup id="fnref:mast"&gt;&lt;a class="footnote-ref" href="#fn:mast"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Start using zero-knowledge and FOSS software services for example
   collaborative document editing&lt;sup id="fnref:docs"&gt;&lt;a class="footnote-ref" href="#fn:docs"&gt;4&lt;/a&gt;&lt;/sup&gt; and emails&lt;sup id="fnref:email"&gt;&lt;a class="footnote-ref" href="#fn:email"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Prefer end-to-end encrypted chat applications which cannot be
   compromised&lt;sup id="fnref:chat"&gt;&lt;a class="footnote-ref" href="#fn:chat"&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="solutions-that-need-you-to-be-a-power-user"&gt;&lt;a class="toclink" href="#solutions-that-need-you-to-be-a-power-user"&gt;Solutions that need you to be a power user&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are tech-savvy enough, you can start using OpenPGP with email using
&lt;a href="https://emailselfdefense.fsf.org/en/"&gt;Enigmail&lt;/a&gt;. And for services you can
also consider self-hosting it&lt;sup id="fnref:host"&gt;&lt;a class="footnote-ref" href="#fn:host"&gt;7&lt;/a&gt;&lt;/sup&gt; in low-power devices such as a Raspberry
Pi. You can even get a URL to point to your server at absolutely no charge&lt;sup id="fnref:dns"&gt;&lt;a class="footnote-ref" href="#fn:dns"&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3 id="repl-read-evaluate-print-and-loop"&gt;&lt;a class="toclink" href="#repl-read-evaluate-print-and-loop"&gt;REPL: Read, evaluate, print and loop&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop"&gt;REPL&lt;/a&gt; is a
jargon for consoles of all sorts: bash, python etc. In this case I apply this
into our social media usage. Read what others post, evaluate your thoughts,
share your thoughts into the platform, keep doing it. What is unique about REPL
consoles is that &lt;strong&gt;data is ephemeral&lt;/strong&gt;. What you type is not meant to last forever.&lt;/p&gt;
&lt;p&gt;Therefore, I have started to cleanse my digital data footprint. I &lt;a href="https://deletefacebook.com"&gt;deleted my
Facebook account&lt;/a&gt; several months ago. Right now I
am deleting all my tweets&lt;sup id="fnref:tweets"&gt;&lt;a class="footnote-ref" href="#fn:tweets"&gt;10&lt;/a&gt;&lt;/sup&gt;. My reasons are more than privacy oriented.
I do not want blood on my hands on a platform that have a proven impact on how
people think, how they vote and do things. And these platforms profit from
selling analytics, and manipulate users using algorithmic timelines and
recommendations. I am therefore progressively transitioning to more ethical
services.&lt;/p&gt;
&lt;p&gt;Unless you are in full control, you have to be always to be cautious while
entrusting some of your data with a third-party service. Even if they are
ethical now. I remember a time not so long ago, when I had a positive
impression about Google and its "Don't be evil" tag line&lt;sup id="fnref:evil"&gt;&lt;a class="footnote-ref" href="#fn:evil"&gt;9&lt;/a&gt;&lt;/sup&gt;. I keep archives
of my Mastodon account&lt;sup id="fnref:archive"&gt;&lt;a class="footnote-ref" href="#fn:archive"&gt;11&lt;/a&gt;&lt;/sup&gt; and will soon add expiration to my posts. I
also have this idea:&lt;/p&gt;
&lt;iframe src="https://mastodon.acc.sunet.se/@ashwinvis/102518259996206758/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="100%" height="300" allowfullscreen="allowfullscreen"&gt;
&lt;/iframe&gt;

&lt;script src="https://mastodon.acc.sunet.se/embed.js" async="async"&gt;&lt;/script&gt;

&lt;h4 id="appendix-1-mass-tweet-deletion"&gt;&lt;a class="toclink" href="#appendix-1-mass-tweet-deletion"&gt;Appendix 1: Mass tweet deletion&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;So the commands described in the blog post&lt;sup id="fnref2:tweets"&gt;&lt;a class="footnote-ref" href="#fn:tweets"&gt;10&lt;/a&gt;&lt;/sup&gt; seem to work great. Here
is what I did following the instructions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Downloaded an archive from Twitter&lt;/li&gt;
&lt;li&gt;Copy and modify &lt;code&gt;tweet.js&lt;/code&gt; into a proper JSON file.&lt;/li&gt;
&lt;li&gt;Extract the ID of all tweets.&lt;/li&gt;
&lt;li&gt;Sniff out the POST request as a cURL command using Firefox. I also added
   the silent flag &lt;code&gt;-s&lt;/code&gt; for cURL.
   Save it as &lt;code&gt;deletetweet.sh&lt;/code&gt; and make it executable.&lt;/li&gt;
&lt;li&gt;And a personal twist: send delete requests in parallel:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat tweetstodelete.txt &lt;span class="p"&gt;|&lt;/span&gt; parallel -j4 &lt;span class="s2"&gt;&amp;quot;echo &amp;#39;Deleting {}&amp;#39; &amp;amp;&amp;amp; ./deletetweet.sh {}&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt;&amp;gt; delete.log &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
tail -f delete.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the cURL command looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -s &lt;span class="s2"&gt;&amp;quot;https://api.twitter.com/1.1/statuses/destroy/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;.json&amp;quot;&lt;/span&gt; ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So now I am down from 1400 tweets to 544 tweets. And the difference is almost
correct:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;❯ wc -l tweetstodelete.txt
&lt;span class="m"&gt;844&lt;/span&gt; tweetstodelete.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In step 3, the following command was used to extract the tweets with no
interaction&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat tweet.json &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.[] | select(.favorite_count == &amp;quot;0&amp;quot;) | select(.retweet_count == &amp;quot;0&amp;quot;) | select(has(&amp;quot;in_reply_to_user_id_str&amp;quot;) | not)  | .id&amp;#39;&lt;/span&gt; -r &amp;gt; tweetstodelete.txt&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get a list of all the tweets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat tweet.json &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.[] | .id&amp;#39;&lt;/span&gt; -r &amp;gt; tweetstodelete.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need something similar for undoing all the likes on Twitter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; A short how-to "dislike" all your tweets.&lt;/p&gt;
&lt;p&gt;Get a list of tweets to dislike from your archive in a
similar approach. Take the &lt;code&gt;like.js&lt;/code&gt; file from your archive and make it a
proper JSON file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat like.json &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.[] | .like.tweetId&amp;#39;&lt;/span&gt; -r &amp;gt;! tweetstodislike.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The POST request is also similar and contains "destroy". However the tweet ID
should be in the data / payload. Therefore the curl command looks like (note
the &lt;code&gt;$1&lt;/code&gt; where the tweet ID gets substituted):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
curl -s &lt;span class="s1"&gt;&amp;#39;https://api.twitter.com/1.1/favorites/destroy.json&amp;#39;&lt;/span&gt; ...lots of stuff here...&lt;span class="se"&gt;\&lt;/span&gt;
  --data&lt;span class="s2"&gt;&amp;quot;id=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;cards_platform=Web-13&amp;amp; ...even more stuff...&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the command in a file called &lt;code&gt;disliketweet.sh&lt;/code&gt; and then,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat tweetstodislike.txt &lt;span class="p"&gt;|&lt;/span&gt; parallel -j4 &lt;span class="s2"&gt;&amp;quot;echo &amp;#39;Disliking {}&amp;#39; &amp;amp;&amp;amp; ./disliketweet.sh {}&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt;&amp;gt; dislike.log &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
tail -f dislike.log
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="appendix-2-unstar-github-repositories"&gt;&lt;a class="toclink" href="#appendix-2-unstar-github-repositories"&gt;Appendix 2: Unstar GitHub repositories&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Used &lt;a href="https://kirtan403.github.io/bookmark-github-stars/"&gt;bookmark-github-stars&lt;/a&gt;
   to export all my GitHub stars as html and imported into
   &lt;a href="https://zotero.org"&gt;Zotero&lt;/a&gt; (you can also import into your browser). I did so
   because because Zotero also retains valuable metadata (programming language,
   license, description etc.).&lt;/li&gt;
&lt;li&gt;As &lt;a href="https://github.com/zotero/zotero/issues/1515"&gt;Zotero does not automatically fetch metadata in its initial
   import&lt;/a&gt;, I wrote a &lt;a href="https://source.coderefinery.org/ashwinvis/zotero-tools"&gt;few
   scripts&lt;/a&gt; which
   relies on &lt;a href="https://pyzotero.readthedocs.org/en/latest/"&gt;pyzotero&lt;/a&gt;. The
   documentation is minimal, but you can reuse them if you want.&lt;/li&gt;
&lt;li&gt;Finally I run &lt;a href="https://gist.github.com/ashwinvis/b7c749a652471ddfd12546abe2d58b75"&gt;this
   script&lt;/a&gt;
   which relies on &lt;a href="https://pygithub.readthedocs.io/en/latest/"&gt;pygithub&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;script src="https://gist.github.com/ashwinvis/b7c749a652471ddfd12546abe2d58b75.js"&gt;&lt;/script&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:data"&gt;
&lt;p&gt;Also known as &lt;a href="https://en.m.wikipedia.org/wiki/Big_Four_tech_companies"&gt;GAFAM, the big four /
  five&lt;/a&gt;. &lt;a href="https://framatube.org/videos/watch/31225e78-5f41-41dc-bfca-5e63b34e7be4"&gt;Framasoft
  gave an excellent talk about it FOSDEM
  2017&lt;/a&gt;
  if you don't mind the French accent.&amp;#160;&lt;a class="footnote-backref" href="#fnref:data" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:contra"&gt;
&lt;p&gt;Including me. Even this very blog post is right now on GitHub pages,
  and this would seem like a contradiction. In my defence, I started blogging
  here before the acquisition.  As much as I don't like MS products, GitHub
  doesn't look like the worst place in the world and blogs are not private
  places.&amp;#160;&lt;a class="footnote-backref" href="#fnref:contra" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:mast"&gt;
&lt;p&gt;Such as &lt;a href="https://joinmastodon.org"&gt;Mastodon&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:mast" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:docs"&gt;
&lt;p&gt;Good alternatives are &lt;a href="https://cryptpad.fr/"&gt;Cryptpad&lt;/a&gt; and
  &lt;a href="https://github.com/ether/etherpad-lite/wiki/Sites-that-run-Etherpad-Lite"&gt;Etherpad&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:docs" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:email"&gt;
&lt;p&gt;&lt;a href="https://www.privacytools.io/providers/email/"&gt;See alternatives&lt;/a&gt; of
  which I use ProtonMail. The only downsides that I think are: for extra data
  allowance and POP3/IMAP access you need a paid account&amp;#160;&lt;a class="footnote-backref" href="#fnref:email" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:chat"&gt;
&lt;p&gt;&lt;a href="https://docs.google.com/spreadsheets/d/1-UlA4-tslROBDS9IqHalWVztqZo7uxlCeKPQ-8uoFOU/htmlview"&gt;Google docs spreadsheet which compares digital communication
  protocols&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:chat" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:host"&gt;
&lt;p&gt;&lt;a href="https://yunohost.org/"&gt;Why you no host&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:host" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:dns"&gt;
&lt;p&gt;Using &lt;a href="https://wiki.archlinux.org/index.php/Dynamic_DNS"&gt;Dynamic DNS&lt;/a&gt;
  technology. I use a subdomain name provided at
  &lt;a href="https://freedns.afraid.org"&gt;afraid.org&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:dns" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:evil"&gt;
&lt;p&gt;Which was removed in
  &lt;a href="https://en.wikipedia.org/wiki/Don%27t_be_evil"&gt;2018&lt;/a&gt; as they no longer
  follow it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:evil" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:tweets"&gt;
&lt;p&gt;I followed &lt;a href="https://jlelse.blog/posts/mass-delete-tweets/"&gt;@jlelse's tutorial&lt;/a&gt; to delete tweets.&amp;#160;&lt;a class="footnote-backref" href="#fnref:tweets" title="Jump back to footnote 10 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:tweets" title="Jump back to footnote 10 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:archive"&gt;
&lt;p&gt;Using &lt;a href="https://github.com/kensanata/mastodon-backup"&gt;mastodon-archive&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:archive" title="Jump back to footnote 11 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:expire"&gt;
&lt;p&gt;This is &lt;a href="https://alexschroeder.ch/wiki/2017-04-27_Record_Keeping"&gt;an interesting
  essay&lt;/a&gt; on why you
  should expire your posts.&amp;#160;&lt;a class="footnote-backref" href="#fnref:expire" title="Jump back to footnote 12 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Tech Talk"></category><category term="social media"></category><category term="privacy"></category><category term="fediverse"></category></entry><entry><title>Feigenbaum constant</title><link href="https://ashwinvis.github.io/feigenbaum-constant.html" rel="alternate"></link><published>2019-07-24T00:00:00+02:00</published><updated>2019-07-24T00:00:00+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2019-07-24:/feigenbaum-constant.html</id><summary type="html">&lt;p&gt;Computing Feigenbaum constant&lt;/p&gt;
</summary><content type="html">&lt;p&gt;So I saw this on Stephen Wolfram’s blog where a simple recursive
equation can yield chaotic behaviour and seems to have properties like
Hopf bifurcation. I wanted to check out myself.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;&lt;i&gt;i&lt;/i&gt; + 1&lt;/sub&gt; = &lt;i&gt;a&lt;/i&gt;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;&lt;i&gt;i&lt;/i&gt;&lt;/sub&gt;(1 − &lt;i&gt;x&lt;/i&gt;&lt;sub&gt;&lt;i&gt;i&lt;/i&gt;&lt;/sub&gt;)
&lt;/div&gt;
&lt;p&gt;Reference:
&lt;a href="https://blog.stephenwolfram.com/2019/07/mitchell-feigenbaum-1944-2019-4-66920160910299067185320382/"&gt;https://blog.stephenwolfram.com/2019/07/mitchell-feigenbaum-1944-2019-4-66920160910299067185320382/&lt;/a&gt;&lt;/p&gt;
&lt;pre class="m-code"&gt;from sympy import *

## I would love to do it like this. Unfortunately I cannot find a nice way to make a recursive
## sequence in sympy. So I went for the pythonic approach. If someone has a better idea let me
## know!

# a, x = symbols(&amp;#39;a x&amp;#39;, real=True)
# i = symbols(&amp;#39;i&amp;#39;, integer=True)
# f, g = symbols(&amp;#39;f g&amp;#39;, cls=Function)
init_printing()&lt;/pre&gt;
&lt;pre class="m-code"&gt;from functools import lru_cache

@lru_cache(maxsize=8)
def f(i, a, x0):
    if i == 0:
        return x0
    else:
        return a * f(i-1, a, x0) * (1 - f(i-1, a, x0))


# sequence(f, (x, 0, 10))&lt;/pre&gt;
&lt;pre class="m-code"&gt;def series(n, a, x0=1/3): return [f(i, a, x0) for i in range(n)]
series(30, 3.2)&lt;/pre&gt;
&lt;div class="formula"&gt;
&lt;span class="displaystyle"&gt;&lt;span class="symbol"&gt;[&lt;/span&gt;&lt;/span&gt;0.3333333333333333,  0.7111111111111111,  0.6573827160493827,  0.720738178204542,  0.6440789013854076,  0.7335720645618368,  0.6254210901002277,  0.7496625605058258,  0.6005395388213597,  0.7676537636274826,  0.5707566810113398,  0.7839791746952305,  0.5419386506861306,  0.7943716786516055,  0.5227050073850749,  0.7983503444468598,  0.5151586302990083,  0.7992646909678656,  0.5134100631677054,  0.7994245446586822,  0.5131038145790108,  0.7994505281391325,  0.5130540198310227,  0.799454696212004,  0.5130460317330444,  0.7994553633792654,  0.5130447530988549,  0.7994554701330878,  0.5130445485035884,  0.79945548721388&lt;span class="symbol"&gt;]&lt;/span&gt;
&lt;/div&gt;
&lt;pre class="m-code"&gt;from statistics import mean

def series_mean(n, a, x0=1/3):
    s = series(n, a, x0)
    return s, mean(s[n//3:])&lt;/pre&gt;
&lt;pre class="m-code"&gt;N = 50
fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)
for a, ax in zip(
    (2, 3.2, 3.4, 3.5),
    axes.ravel()
):
    s, smean = series_mean(N, a)
    ax.plot(s)
    ax.set_title(f&amp;#39;$a = {a}$&amp;#39;)
    ax.hlines(smean, N//3, N, linestyles=&amp;#39;dashed&amp;#39;)&lt;/pre&gt;
&lt;img src="images/feigenbaum_constant_6_0.png" style="width: 547px; height: 434px" /&gt;
&lt;p&gt;In the last subplot we begin to see period doublings.&lt;/p&gt;
&lt;section id="bifurcation-diagram"&gt;
&lt;h2&gt;Bifurcation diagram&lt;/h2&gt;
&lt;p&gt;In the blog the following Wolfram code is used to generate the calculate
the bifurcation. The first 50 values of the series are ignored to avoid
transients and upto 300 values are calculated vfor each value of
&lt;span class="formula"&gt;&lt;i&gt;a&lt;/i&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="n"&gt;ListPlot&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Flatten&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;#&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/@&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Drop&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NestList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Compile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;.01&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FrameLabel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Before we do that, let us see if it makes any difference if we vary the
initial condition.&lt;/p&gt;
&lt;pre class="m-code"&gt;import numpy as np
N = 300
a_values =  np.linspace(0, 4, 100)
x0_values = np.linspace(0.1, 5, 100)

plt.figure()
for x0 in x0_values:
    smeans = [series_mean(N, a, x0)[1] for a in a_values]
    plt.scatter(a_values, smeans, s=1, c=&amp;quot;r&amp;quot;)
    plt.xlabel(&amp;quot;a&amp;quot;)
    plt.ylabel(&amp;quot;series average&amp;quot;)&lt;/pre&gt;
&lt;pre&gt;/usr/lib/python3.7/site-packages/ipykernel_launcher.py:8: RuntimeWarning: overflow encountered in double_scalars&lt;/pre&gt;
&lt;img src="images/feigenbaum_constant_11_1.png" style="width: 567px; height: 432px" /&gt;
&lt;p&gt;The average value where the series oscillates around does not seem to
depend on the value of &lt;span class="formula"&gt;&lt;i&gt;x&lt;/i&gt;&lt;sub&gt;0&lt;/sub&gt;&lt;/span&gt;. So now instead of plotting the mean,
we can plot the full distribution where of values where the series
oscillates around.&lt;/p&gt;
&lt;pre class="m-code"&gt;import numpy as np
N = 300
a_values =  np.linspace(0, 4, 100)

plt.figure()
for a in a_values:
    s = series(N, a)[50:]
    plt.scatter(a * np.ones_like(s), s, s=1, c=&amp;quot;r&amp;quot;)
    plt.xlabel(&amp;quot;a&amp;quot;)
    plt.ylabel(&amp;quot;series distribution&amp;quot;)&lt;/pre&gt;
&lt;img src="images/feigenbaum_constant_13_0.png" style="width: 567px; height: 432px" /&gt;
&lt;p&gt;There is our multiple Hopf bifurcation :) Let us see what happens for
&lt;span class="formula"&gt;&lt;i&gt;a&lt;/i&gt; &amp;gt; 3.5&lt;/span&gt;.&lt;/p&gt;
&lt;pre class="m-code"&gt;N = 300
fig, axes = plt.subplots(2, 2, sharex=True, sharey=True, figsize=(15, 5))
for a, ax in zip(
    (3.6, 3.7, 3.8, 3.9),
    axes.ravel()
):
    s, smean = series_mean(N, a)
    ax.plot(s)
    ax.set_title(f&amp;#39;$a = {a}$&amp;#39;)
    ax.hlines(smean, N//3, N, linestyles=&amp;#39;dashed&amp;#39;)&lt;/pre&gt;
&lt;img src="images/feigenbaum_constant_15_0.png" style="width: 1214px; height: 450px" /&gt;
&lt;p&gt;Nice! Maybe I will do a follow up to compute the Lyapunov constant.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You
can&lt;/em&gt;&lt;a href="https://raw.githubusercontent.com/ashwinvis/ashwinvis.github.io/develop/src/content/feigenbaum_constant.ipynb"&gt;download&lt;/a&gt;&lt;em&gt;this
notebook, or see a static view&lt;/em&gt;&lt;a href="https://nbviewer.jupyter.org/github/ashwinvis/ashwinvis.github.io/blob/develop/src/content/feigenbaum_constant.ipynb"&gt;on
nbviewer&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="python"></category><category term="sympy"></category></entry><entry><title>A dictionary of horrors</title><link href="https://ashwinvis.github.io/a-dictionary-of-horrors.html" rel="alternate"></link><published>2019-01-31T00:00:00+01:00</published><updated>2019-06-29T00:00:00+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2019-01-31:/a-dictionary-of-horrors.html</id><summary type="html"></summary><content type="html">&lt;p&gt;This post demonstrates a strange behaviour encountered while
initializing a dictionary using the &lt;code&gt;dict.fromkeys&lt;/code&gt; method. TLDR: be
careful while passing mutable arguments such as lists.&lt;/p&gt;
&lt;pre class="m-code"&gt;planets = (&amp;quot;Mercury&amp;quot;, &amp;quot;Venus&amp;quot;, &amp;quot;Earth&amp;quot;, &amp;quot;Mars&amp;quot;)

sattelites = dict.fromkeys(planets, value=[])
sattelites&lt;/pre&gt;
&lt;pre&gt;{'Mercury': [], 'Venus': [], 'Earth': [], 'Mars': []}&lt;/pre&gt;
&lt;pre class="m-code"&gt;sattelites[&amp;quot;Earth&amp;quot;].append(&amp;quot;Moon&amp;quot;)&lt;/pre&gt;
&lt;section id="what-you-expect"&gt;
&lt;h2&gt;What you expect&lt;/h2&gt;
&lt;pre class="m-code"&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sattelites&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mercury&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Venus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Earth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Moon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]}&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="what-you-actually-get"&gt;
&lt;h2&gt;What you actually get&lt;/h2&gt;
&lt;pre class="m-code"&gt;sattelites&lt;/pre&gt;
&lt;pre&gt;{'Mercury': ['Moon'], 'Venus': ['Moon'], 'Earth': ['Moon'], 'Mars': ['Moon']}&lt;/pre&gt;
&lt;section id="why"&gt;
&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;Surely string as keys are valid and hashable, no doubt about that, but
this behaviour is weird.&lt;/p&gt;
&lt;pre class="m-code"&gt;id(sattelites[&amp;quot;Earth&amp;quot;]), id(sattelites[&amp;quot;Mars&amp;quot;])&lt;/pre&gt;
&lt;pre&gt;(139764445576200, 139764445576200)&lt;/pre&gt;
&lt;p&gt;Apparently the same &lt;code&gt;list&lt;/code&gt; instance is assigned to all the dictionary
items which gets mutated. This is also the case if you initialize as
follows.&lt;/p&gt;
&lt;pre class="m-code"&gt;sattelites = dict.fromkeys(planets, list())
id(sattelites[&amp;quot;Earth&amp;quot;]), id(sattelites[&amp;quot;Mars&amp;quot;])&lt;/pre&gt;
&lt;pre&gt;(139764445511368, 139764445511368)&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; is still the same across dictionaries!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solution-use-dictionary-comprehensions"&gt;
&lt;h3&gt;The solution: Use dictionary comprehensions&lt;/h3&gt;
&lt;pre class="m-code"&gt;sattelites = {planet: [] for planet in planets}
sattelites&lt;/pre&gt;
&lt;pre&gt;{'Mercury': [], 'Venus': [], 'Earth': [], 'Mars': []}&lt;/pre&gt;
&lt;pre class="m-code"&gt;sattelites[&amp;quot;Earth&amp;quot;].append(&amp;quot;Moon&amp;quot;)
sattelites&lt;/pre&gt;
&lt;pre&gt;{'Mercury': [], 'Venus': [], 'Earth': ['Moon'], 'Mars': []}&lt;/pre&gt;
&lt;pre class="m-code"&gt;id(sattelites[&amp;quot;Earth&amp;quot;]), id(sattelites[&amp;quot;Mars&amp;quot;])&lt;/pre&gt;
&lt;pre&gt;(139764445567048, 139764351351752)&lt;/pre&gt;
&lt;p&gt;Finally the &lt;code&gt;id&lt;/code&gt;s are different :)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You
can&lt;/em&gt; &lt;a href="https://raw.githubusercontent.com/ashwinvis/ashwinvis.github.io/develop/content/dictionary_of_horrors.ipynb"&gt;download&lt;/a&gt; &lt;em&gt;this
notebook, or see a static view&lt;/em&gt; &lt;a href="https://nbviewer.jupyter.org/github/ashwinvis/ashwinvis.github.io/blob/develop/content/dictionary_of_horrors.ipynb"&gt;on
nbviewer&lt;/a&gt; &lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="python"></category></entry><entry><title>Lightweight classes for scientific computing using “cached_property”</title><link href="https://ashwinvis.github.io/lightweight-classes-for-scientific-computing-using-cached_property.html" rel="alternate"></link><published>2018-12-25T00:00:00+01:00</published><updated>2018-12-26T00:00:00+01:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2018-12-25:/lightweight-classes-for-scientific-computing-using-cached_property.html</id><summary type="html"></summary><content type="html">&lt;p&gt;In the quest for optimization and fast computation, while using
object-oriented programming, it is a typical technique to initialize the
linear algebra array operators as class attributes. Especially in
&lt;code&gt;fluidfft&lt;/code&gt; we encounter pseudospectral operator classes that look
like:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fluiddyn.util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mpi&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meshgrid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ky_loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kx_loc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KX2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KX&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KY2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KY&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KX2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KY2&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K4&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K_not0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K2_not0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K4_not0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;mpi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_sequential&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K_not0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0e-10&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K2_not0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0e-10&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K4_not0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0e-10&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, for the purpose of fast computation, we store modified
versions of the wavenumber arrays that are used repeatedly later on,
during simulation. These arrays may not be required while instantiating
the same class for post-processing, and could result in unnecessary
delays while loading large simulations.&lt;/p&gt;
&lt;p&gt;For demonstrating using a simple example, we can create a class which
automatically stores the operator arrays to compute the &lt;strong&gt;derivatives
using finite difference schemes&lt;/strong&gt;. Specifically we consider a &lt;em&gt;compact
finite difference scheme&lt;/em&gt;, named OUCS3 (Sengupta, T.K., Sircar, S.K. &amp;amp;
Dipankar, A., &lt;a href="https://doi.org/10.1007/s10915-005-4928-3"&gt;J Sci Comput (2006) 26:
151&lt;/a&gt;).&lt;/p&gt;
&lt;section id="short-primer-on-explicit-and-compact-finite-difference-schemes"&gt;
&lt;h2&gt;Short primer on explicit and compact finite difference schemes&lt;/h2&gt;
&lt;p&gt;Differentiation using explicit finite difference scheme can be
represented as:&lt;/p&gt;
&lt;div class="formula"&gt;
{&lt;i&gt;u&lt;/i&gt;’} = &lt;b&gt;A&lt;/b&gt;{&lt;i&gt;u&lt;/i&gt;}
&lt;/div&gt;
&lt;p&gt;Where &lt;span class="formula"&gt;&lt;i&gt;u&lt;/i&gt;&lt;/span&gt; is a known 1-D vector and &lt;span class="formula"&gt;&lt;i&gt;u&lt;/i&gt;’&lt;/span&gt; is the desired
first derivative of &lt;span class="formula"&gt;&lt;i&gt;u&lt;/i&gt;&lt;/span&gt;. For &lt;em&gt;second-order central difference&lt;/em&gt;
(&lt;span class="formula"&gt;&lt;i&gt;CD&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;), the “matrix” &lt;span class="formula"&gt;&lt;b&gt;A&lt;/b&gt;&lt;/span&gt; takes the form of a
tri-diagonal matrix with repeating elements like:&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;b&gt;A&lt;/b&gt; = &lt;span class="array"&gt;&lt;span class="arrayrow"&gt;
&lt;span class="arraycell align-c"&gt;
0
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
1 ⁄ Δ
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
⋯
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
0
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="arraycell align-c"&gt;
 
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
 
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
 
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
 
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="arraycell align-c"&gt;
 − 1 ⁄ Δ
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
⋱
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
⋱
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
0
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="arraycell align-c"&gt;
 
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
 
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
 
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
 
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="arraycell align-c"&gt;
⋮
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
⋱
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
⋱
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
1 ⁄ Δ
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="arraycell align-c"&gt;
 
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
 
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
 
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
 
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="arraycell align-c"&gt;
0
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
0
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
 − 1 ⁄ Δ
&lt;/span&gt;
&lt;span class="arraycell align-c"&gt;
0
&lt;/span&gt;

&lt;/span&gt;
&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;Such schemes do not require an array representation and can be
substituted with for-loops is compiled languages such as C, Fortran etc.
To implement this particular case in Python, they have to be either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;represented using sparse matrices to allow for fast dot product,
matrix multiplications etc.&lt;/li&gt;
&lt;li&gt;implemented using compiled functions (Pythran, Cython, Numba etc.) to
allow for fast looping over arrays&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However irrespective of the programming languages, when we begin to use
higher order schemes such as compact finite difference schemes:&lt;/p&gt;
&lt;p&gt;we end up initializing arrays. Here &lt;span class="formula"&gt;&lt;b&gt;A&lt;/b&gt;&lt;/span&gt; and
&lt;span class="formula"&gt;&lt;b&gt;B&lt;/b&gt;&lt;/span&gt; can be sparse matrices, typically pentadiagonal and
tridiagonal respectively. The resultant operator,
&lt;span class="formula"&gt;&lt;b&gt;C&lt;/b&gt; = &lt;b&gt;B&lt;/b&gt; − 1&lt;b&gt; A&lt;/b&gt;&lt;/span&gt; is quite dense, and thus
in practice it is easier to compute the derivative in two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Matrix multiplication &lt;span class="formula"&gt;&lt;b&gt;A&lt;/b&gt;{&lt;i&gt;u&lt;/i&gt;} → {&lt;i&gt;d&lt;/i&gt;}&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Solve &lt;span class="formula"&gt;&lt;b&gt;B&lt;/b&gt;{&lt;i&gt;u&lt;/i&gt;’} = {&lt;i&gt;d&lt;/i&gt;}&lt;/span&gt; iteratively, using TDMA&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;strong&gt;Note&lt;/strong&gt;: Boundary conditions (BC) would mean the matrices would be
slightly different, but we avoid this consideration in this post,
since &lt;code&gt;scipy&lt;/code&gt; does not seem to have special solvers for such
matrices. Ideally one would use a Thomas Diagonal Matrix Algorithm /
TDMA specially designed for problems with periodic BC.&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="demo"&gt;
&lt;h2&gt;Demo&lt;/h2&gt;
&lt;p&gt;We will be reusing the following &lt;code&gt;Base&lt;/code&gt; class to store the input
parameters for OUCS3&lt;/p&gt;
&lt;pre class="m-code"&gt;%matplotlib inline
import numpy as np
from scipy.sparse import diags
from scipy.sparse.linalg import inv
import seaborn as sns


class Base:
    def __init__(self, L, N, alpha=0.0):
        &amp;quot;&amp;quot;&amp;quot;Gather input parameters for OUCS3

        Parameters
        ----------
        L: float
            length of the domain
        N: int
            number of points
        alpha: float
            upwind factor, adds numerical dissipation

        &amp;quot;&amp;quot;&amp;quot;
        # Scalar parameters
        self.L = L
        self.N = N

        delta = L / (N - 1)

        a0 = -11 * alpha / 150
        a1 = 1.57557379 / 2.0 + alpha / 30.0
        a2 = 0.183205192 / 4.0 + alpha / 300.0

        b0 = 1.0
        b1 = 0.3793894912 + alpha / 60.0

        # Create pentadiagonal matrix, A
        self.A = diags(
            np.array([-a2, -a1, a0, a1, a2]) / delta,
            [-2, -1, 0, 1, 2,],
            shape=(N, N),
            format=&amp;quot;csc&amp;quot;
        )

        # Create tridiagonal matrix, B
        self.B = diags(
            [b1, b0, b1],
            [-1, 0, 1],
            shape=(N, N),
            format=&amp;quot;csc&amp;quot;
        )

    def diff(self, u):
        Au = self.A @ u
        # inefficient alternative
        return inv(self.B) @ Au

    def plot(self, **fields):
        fields.update({&amp;quot;x&amp;quot;: np.linspace(0, self.L, self.N)})
        for field in fields:
            if field != &amp;quot;x&amp;quot;:
                sns.lineplot(&amp;quot;x&amp;quot;, field, data=fields, label=field)&lt;/pre&gt;
&lt;p&gt;Have a look at how the arrays look like&lt;/p&gt;
&lt;pre class="m-code"&gt;o = Base(4 * np.pi, 6)
print(&amp;quot;\nA = \n&amp;quot;, o.A.toarray())
print(&amp;quot;\nB = \n&amp;quot;, o.B.toarray())&lt;/pre&gt;
&lt;pre&gt;A =
 [[ 0.          0.31345045  0.01822376  0.          0.          0.        ]
 [-0.31345045  0.          0.31345045  0.01822376  0.          0.        ]
 [-0.01822376 -0.31345045  0.          0.31345045  0.01822376  0.        ]
 [ 0.         -0.01822376 -0.31345045  0.          0.31345045  0.01822376]
 [ 0.          0.         -0.01822376 -0.31345045  0.          0.31345045]
 [ 0.          0.          0.         -0.01822376 -0.31345045  0.        ]]

B =
 [[1.         0.37938949 0.         0.         0.         0.        ]
 [0.37938949 1.         0.37938949 0.         0.         0.        ]
 [0.         0.37938949 1.         0.37938949 0.         0.        ]
 [0.         0.         0.37938949 1.         0.37938949 0.        ]
 [0.         0.         0.         0.37938949 1.         0.37938949]
 [0.         0.         0.         0.         0.37938949 1.        ]]&lt;/pre&gt;
&lt;p&gt;We can inherit the class to use an efficient algorithm to solve such
arrays, such as &lt;code&gt;scipy.linalg.solve_toeplitz&lt;/code&gt; which does not accept
sparse arrays as inputs.&lt;/p&gt;
&lt;pre class="m-code"&gt;from scipy.linalg import solve_toeplitz

class OUCS3(Base):
    &amp;quot;&amp;quot;&amp;quot;A class to perform OUCS3 compact scheme finite differentiation.&amp;quot;&amp;quot;&amp;quot;
    def diff(self, u):
        Au = self.A @ u
        B_column = self.B[:,0].toarray()
        B_row = self.B[0,:].toarray()
        return solve_toeplitz((B_column, B_row), Au)&lt;/pre&gt;
&lt;section id="test-that-everything-works"&gt;
&lt;h3&gt;Test that everything works&lt;/h3&gt;
&lt;p&gt;Let’s compare derivatives of a gaussian pulse computed using OUCS3 and
explicit finite difference schemes.&lt;/p&gt;
&lt;pre class="m-code"&gt;from scipy.signal import gausspulse

def init_params_fields(N):
    &amp;quot;&amp;quot;&amp;quot;Initialize parameters and generate a gaussian pulse.&amp;quot;&amp;quot;&amp;quot;
    L = 2 * np.pi
    x = np.linspace(0, L, N)

    u = gausspulse(abs(x - L/2), fc=2)
    return L, N, x, u

L, N, x, u = init_params_fields(100)

oper = OUCS3(L, N)
ux = oper.diff(u)

oper.plot(u=u, ux_OUCS3=ux, ux_explicit=np.gradient(u, x))&lt;/pre&gt;
&lt;img src="images/lightweight_classes_8_0.png" /&gt;
&lt;/section&gt;
&lt;section id="cost-of-instantiation-and-computing-derivatives"&gt;
&lt;h3&gt;Cost of instantiation and computing derivatives&lt;/h3&gt;
&lt;p&gt;Let us have a look at the time consumed in instantiating the class. We
will use&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="formula"&gt;&lt;i&gt;N&lt;/i&gt; = 1000&lt;/span&gt; (typical array size for a well resolved 1D simulation)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We might extend what we observe here to 2D (&lt;span class="formula"&gt;&lt;i&gt;N&lt;/i&gt; = 10002&lt;/span&gt;) and 3D
simulations (&lt;span class="formula"&gt;&lt;i&gt;N&lt;/i&gt; = 1003&lt;/span&gt; to &lt;span class="formula"&gt;&lt;i&gt;N&lt;/i&gt; = 10003&lt;/span&gt;). We shall use the
package &lt;code&gt;line_profiler&lt;/code&gt; to time the time elapsed in each line. The
system has been tuned using &lt;code&gt;perf&lt;/code&gt; package to reduce jitter.&lt;/p&gt;
&lt;pre class="m-code"&gt;%load_ext line_profiler

def profile_OUCS3(N):
    L, N, x, u = init_params_fields(N)
    oper = OUCS3(L, N)  # instantiate
    ux = oper.diff(u)   # compute derivative

%lprun -f profile_OUCS3 -f OUCS3.diff profile_OUCS3(1_000)&lt;/pre&gt;
&lt;pre&gt;Timer unit: 1e-06 s

Total time: 0.01216 s
File: &amp;lt;ipython-input-3-12c24f274ae1&amp;gt;
Function: diff at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                               def diff(self, u):
     6         1         87.0     87.0      0.7          Au = self.A &amp;#64; u
     7         1       1579.0   1579.0     13.0          B_column = self.B[:,0].toarray()
     8         1       1648.0   1648.0     13.6          B_row = self.B[0,:].toarray()
     9         1       8846.0   8846.0     72.7          return solve_toeplitz((B_column, B_row), Au)

Total time: 0.015373 s
File: &amp;lt;ipython-input-5-3ad1c1c5fdb7&amp;gt;
Function: profile_OUCS3 at line 3

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     3                                           def profile_OUCS3(N):
     4         1        342.0    342.0      2.2      L, N, x, u = init_params_fields(N)
     5         1       2846.0   2846.0     18.5      oper = OUCS3(L, N)  # instantiate
     6         1      12185.0  12185.0     79.3      ux = oper.diff(u)   # compute derivative&lt;/pre&gt;
&lt;p&gt;The instantiation just takes over a millisecond and secondary arrays
&lt;code&gt;B_column&lt;/code&gt; and &lt;code&gt;B_row&lt;/code&gt; takes around a millisecond each, taking a
combined time of around &lt;span class="formula"&gt;20%&lt;/span&gt; of the method &lt;code&gt;diff&lt;/code&gt;. Even at
this scale, we see it can be benificial to store &lt;code&gt;B_column&lt;/code&gt; and
&lt;code&gt;B_array&lt;/code&gt; as attributes.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="howto-create-a-lightweight-class-with-cached-attributes"&gt;
&lt;h2&gt;HOWTO: create a lightweight class with cached attributes&lt;/h2&gt;
&lt;p&gt;Let us begin by inheriting the &lt;code&gt;Base&lt;/code&gt; class wherein the &lt;code&gt;diff&lt;/code&gt;
method uses stored values for &lt;code&gt;B_column&lt;/code&gt; and &lt;code&gt;B_row&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="m-code"&gt;from scipy.linalg import solve_toeplitz

class BaseCached(Base):
    def diff(self, u):
        Au = self.A @ u
        B_column = self._B_column
        B_row = self._B_row
        return solve_toeplitz((B_column, B_row), Au)&lt;/pre&gt;
&lt;section id="first-run"&gt;
&lt;h3&gt;First run&lt;/h3&gt;
&lt;p&gt;If we are not going to rely on a third-party packages, we can do the
following now (with Python 3) with &lt;code&gt;functools.lru_cache&lt;/code&gt;
(&lt;a href="https://docs.python.org/3/library/functools.html?highlight=lru_cache#functools.lru_cache"&gt;docs&lt;/a&gt;).&lt;/p&gt;
&lt;pre class="m-code"&gt;from functools import lru_cache

class OUCS3Native(BaseCached):
    &amp;quot;&amp;quot;&amp;quot;A native implementation of a ``cached_property``.&amp;quot;&amp;quot;&amp;quot;
    @property
    @lru_cache(maxsize=2)
    def _B_column(self):
        return self.B[:,0].toarray()

    @property
    @lru_cache(maxsize=2)
    def _B_row(self):
        return self.B[0,:].toarray()

L, N, x, u = init_params_fields(1_000)
oper_native = OUCS3Native(L, N)

%lprun -f OUCS3Native.diff oper_native.diff(u)&lt;/pre&gt;
&lt;pre&gt;Timer unit: 1e-06 s

Total time: 0.011203 s
File: &amp;lt;ipython-input-6-b2308b39973e&amp;gt;
Function: diff at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                               def diff(self, u):
     5         1        155.0    155.0      1.4          Au = self.A &amp;#64; u
     6         1       1783.0   1783.0     15.9          B_column = self._B_column
     7         1       1649.0   1649.0     14.7          B_row = self._B_row
     8         1       7616.0   7616.0     68.0          return solve_toeplitz((B_column, B_row), Au)&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="second-run"&gt;
&lt;h3&gt;Second run&lt;/h3&gt;
&lt;pre class="m-code"&gt;%lprun -f OUCS3Native.diff oper_native.diff(u)&lt;/pre&gt;
&lt;pre&gt;Timer unit: 1e-06 s

Total time: 0.006538 s
File: &amp;lt;ipython-input-6-b2308b39973e&amp;gt;
Function: diff at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                               def diff(self, u):
     5         1        139.0    139.0      2.1          Au = self.A &amp;#64; u
     6         1          3.0      3.0      0.0          B_column = self._B_column
     7         1          1.0      1.0      0.0          B_row = self._B_row
     8         1       6395.0   6395.0     97.8          return solve_toeplitz((B_column, B_row), Au)&lt;/pre&gt;
&lt;p&gt;It is super quick to access &lt;code&gt;_B_column&lt;/code&gt; and &lt;code&gt;_B_row&lt;/code&gt; in the second
run and takes simply microseconds!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="how-does-it-work"&gt;
&lt;h2&gt;How does it work&lt;/h2&gt;
&lt;p&gt;The least recently used cache (LRU) optimizes the function call, caches
the return value, and returns the cache for future calls if the function
parameters were “unchanged”.&lt;/p&gt;
&lt;p&gt;Such an implementation would be protected from simple initialization
attempts such as:&lt;/p&gt;
&lt;pre class="m-code"&gt;oper_native._B_column = 0&lt;/pre&gt;
&lt;pre&gt;---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&amp;lt;ipython-input-11-6219892dab4c&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 oper_native._B_column = 0


AttributeError: can't set attribute&lt;/pre&gt;
&lt;p&gt;However it is unsafe and can lead to the following unpredictable
behaviours:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overwriting the original array after first run does not modify the
result:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;oper_native.B = np.zeros((N,N))

ux = oper_native.diff(u)
oper_native.plot(ux=ux)&lt;/pre&gt;
&lt;img src="images/lightweight_classes_23_0.png" /&gt;
&lt;ul&gt;
&lt;li&gt;No error is raised when modifying the array in place&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;oper_native._B_column[:] = 0&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;lru_cache(maxsize=None)&lt;/code&gt; is used it would lead to a potential
memory leak.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="do-it-better"&gt;
&lt;h2&gt;Do it better&lt;/h2&gt;
&lt;section id="other-third-party-implementations"&gt;
&lt;h3&gt;Other third-party implementations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;werkzeug.utils.cached_property&lt;/code&gt;
(&lt;a href="http://werkzeug.pocoo.org/docs/0.14/utils/"&gt;docs&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cached_property.cached_property&lt;/code&gt;
(&lt;a href="https://github.com/pydanny/cached-property"&gt;docs&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These would cache the “property” inside &lt;code&gt;__dict__&lt;/code&gt; and not in some
random location in a memory.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="werkzeug"&gt;
&lt;h3&gt;Werkzeug&lt;/h3&gt;
&lt;pre class="m-code"&gt;from werkzeug.utils import cached_property as wcached_property


class OUCS3Werkzeug(BaseCached):
    &amp;quot;&amp;quot;&amp;quot;Werkzeug implementation of a ``cached_property``.

    &amp;quot;&amp;quot;&amp;quot;
    @wcached_property
    def _B_column(self):
        return self.B[:,0].toarray()

    @wcached_property
    def _B_row(self):
        return self.B[0,:].toarray()&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="id1"&gt;
&lt;h3&gt;First run&lt;/h3&gt;
&lt;pre class="m-code"&gt;L, N, x, u = init_params_fields(1_000)
oper_wz = OUCS3Werkzeug(L, N)

%lprun -f OUCS3Werkzeug.diff oper_wz.diff(u)&lt;/pre&gt;
&lt;pre&gt;Timer unit: 1e-06 s

Total time: 0.009176 s
File: &amp;lt;ipython-input-6-b2308b39973e&amp;gt;
Function: diff at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                               def diff(self, u):
     5         1        124.0    124.0      1.4          Au = self.A &amp;#64; u
     6         1        914.0    914.0     10.0          B_column = self._B_column
     7         1        887.0    887.0      9.7          B_row = self._B_row
     8         1       7251.0   7251.0     79.0          return solve_toeplitz((B_column, B_row), Au)&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="id2"&gt;
&lt;h3&gt;Second run&lt;/h3&gt;
&lt;pre class="m-code"&gt;%lprun -f OUCS3Werkzeug.diff oper_wz.diff(u)&lt;/pre&gt;
&lt;pre&gt;Timer unit: 1e-06 s

Total time: 0.010082 s
File: &amp;lt;ipython-input-6-b2308b39973e&amp;gt;
Function: diff at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                               def diff(self, u):
     5         1        508.0    508.0      5.0          Au = self.A &amp;#64; u
     6         1         11.0     11.0      0.1          B_column = self._B_column
     7         1          4.0      4.0      0.0          B_row = self._B_row
     8         1       9559.0   9559.0     94.8          return solve_toeplitz((B_column, B_row), Au)&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="cached-property"&gt;
&lt;h3&gt;cached_property&lt;/h3&gt;
&lt;pre class="m-code"&gt;from cached_property import cached_property as ccached_property


class OUCS3CachedProperty(BaseCached):
    &amp;quot;&amp;quot;&amp;quot;Werkzeug implementation of a ``cached_property``.

    &amp;quot;&amp;quot;&amp;quot;
    @ccached_property
    def _B_column(self):
        return self.B[:,0].toarray()

    @ccached_property
    def _B_row(self):
        return self.B[0,:].toarray()&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="id3"&gt;
&lt;h3&gt;First run&lt;/h3&gt;
&lt;pre class="m-code"&gt;L, N, x, u = init_params_fields(1_000)
oper_cp = OUCS3CachedProperty(L, N)

%lprun -f OUCS3CachedProperty.diff oper_cp.diff(u)&lt;/pre&gt;
&lt;pre&gt;Timer unit: 1e-06 s

Total time: 0.010591 s
File: &amp;lt;ipython-input-6-b2308b39973e&amp;gt;
Function: diff at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                               def diff(self, u):
     5         1        149.0    149.0      1.4          Au = self.A &amp;#64; u
     6         1       1105.0   1105.0     10.4          B_column = self._B_column
     7         1       1935.0   1935.0     18.3          B_row = self._B_row
     8         1       7402.0   7402.0     69.9          return solve_toeplitz((B_column, B_row), Au)&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="id4"&gt;
&lt;h3&gt;Second run&lt;/h3&gt;
&lt;pre class="m-code"&gt;%lprun -f OUCS3CachedProperty.diff oper_cp.diff(u)&lt;/pre&gt;
&lt;pre&gt;Timer unit: 1e-06 s

Total time: 0.006916 s
File: &amp;lt;ipython-input-6-b2308b39973e&amp;gt;
Function: diff at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                               def diff(self, u):
     5         1        141.0    141.0      2.0          Au = self.A &amp;#64; u
     6         1          3.0      3.0      0.0          B_column = self._B_column
     7         1          1.0      1.0      0.0          B_row = self._B_row
     8         1       6771.0   6771.0     97.9          return solve_toeplitz((B_column, B_row), Au)&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="differences-from-the-native-implementation"&gt;
&lt;h3&gt;Differences from the native implementation&lt;/h3&gt;
&lt;p&gt;Overwriting cached property is OK as follows&lt;/p&gt;
&lt;pre class="m-code"&gt;oper_wz._B_column = 0
oper_cp._B_column = 0&lt;/pre&gt;
&lt;p&gt;An advantage of such implementation is there is no need to add a
&lt;code&gt;maxsize&lt;/code&gt; parameter, and thus no risk of having a memory leak.&lt;/p&gt;
&lt;p&gt;The rest of the “caveats” mentioned before still persist in the
third-party implementation. I am not sure if it would be possible to
raise an &lt;code&gt;AttributeError&lt;/code&gt; when attempts are made to alter cached
property. But this depends on the application, so the caveat can be a
feature.&lt;/p&gt;
&lt;p&gt;When Python 3.8 becomes available we would have access to a &lt;a href="https://docs.python.org/3.8/library/functools.html?highlight=cached_property#functools.cached_property"&gt;native
implementation&lt;/a&gt;
and we would be able to do:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cached_property&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OUCS3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseCached&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A class to perform OUCS3 compact scheme finite differentiation.&lt;/span&gt;
&lt;span class="sd"&gt;    A Python 3.8 implementation of a ``cached_property``.&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nd"&gt;@cached_property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_B_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toarray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@cached_property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_B_row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toarray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Exciting times ahead.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post was written entirely in the Jupyter notebook. You
can&lt;/em&gt; &lt;a href="https://raw.githubusercontent.com/ashwinvis/ashwinvis.github.io/develop/content/lightweight_classes.ipynb"&gt;download&lt;/a&gt; &lt;em&gt;this
notebook, or see a static view&lt;/em&gt; &lt;a href="https://nbviewer.jupyter.org/github/ashwinvis/ashwinvis.github.io/blob/develop/content/lightweight_classes.ipynb"&gt;on
nbviewer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; We have begun to use &lt;code&gt;cached_property&lt;/code&gt; in
&lt;a href="https://fluidsht.readthedocs.io/en/latest/_modules/fluidsht/sht2d/operators.html#OperatorsSphereHarmo2D"&gt;FluidSHT&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="fluidfft"></category><category term="fluidsim"></category><category term="optimization"></category></entry><entry><title>Intensely edgy cat with FluidFFT</title><link href="https://ashwinvis.github.io/intensely-edgy-cat-with-fluidfft.html" rel="alternate"></link><published>2018-08-16T00:00:00+02:00</published><updated>2018-08-16T00:00:00+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2018-08-16:/intensely-edgy-cat-with-fluidfft.html</id><summary type="html"></summary><content type="html">&lt;p&gt;&lt;em&gt;This is a reimplementaion of&lt;/em&gt;&lt;a href="https://github.com/egpbos/xtensor-fftw/blob/master/notebooks/intensely_edgy_cat.ipynb"&gt;Patrick Bos’s
notebook&lt;/a&gt;&lt;em&gt;which
showcases&lt;/em&gt;&lt;a href="https://github.com/egpbos/xtensor-fftw/"&gt;xtensor-fftw&lt;/a&gt;&lt;em&gt;.
Here, we
use&lt;/em&gt;&lt;a href="https://fluidfft.readthedocs.io"&gt;fluidfft&lt;/a&gt;&lt;em&gt;instead.&lt;/em&gt;&lt;/p&gt;
&lt;section id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;pre class="m-code"&gt;import fluidfft     # fft, ifft and other operators

import numpy as np  # numpy arrays!

# for displaying images
from PIL import Image
import urllib
import io
import matplotlib.pyplot as plt&lt;/pre&gt;
&lt;pre class="m-code"&gt;# We go one step further and directly load from the internet
%matplotlib inline

def load_image(url):
    fd = urllib.request.urlopen(url)
    image_file = io.BytesIO(fd.read())
    im = Image.open(image_file)
    im = np.array(im, dtype=np.float64)  # Convert the PIL.PngImagePlugin.PngImageFile object to a numpy array
    return im

def display(im):
    plt.imshow(im, cmap=&amp;quot;gist_gray&amp;quot;)
    plt.axis(&amp;#39;off&amp;#39;)&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="intense-cat"&gt;
&lt;h2&gt;Intense cat&lt;/h2&gt;
&lt;p&gt;Let’s perform some Fourier space operations on &lt;a href="https://commons.wikimedia.org/wiki/File:Intensity_image_with_gradient_images.png"&gt;this public domain,
intense
kitty&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="m-code"&gt;image = load_image(&amp;quot;https://upload.wikimedia.org/wikipedia/commons/6/67/Intensity_image_with_gradient_images.png&amp;quot;)
display(image)&lt;/pre&gt;
&lt;img src="images/intensely_edgy_cat_7_0.png" /&gt;
&lt;pre class="m-code"&gt;image = image[5:-5, 5:205]  # Crop to the first frame and trim the frame edges
display(image)&lt;/pre&gt;
&lt;img src="images/intensely_edgy_cat_8_0.png" /&gt;
&lt;/section&gt;
&lt;section id="edge-detection-on-intensity-image"&gt;
&lt;h2&gt;Edge detection on intensity image&lt;/h2&gt;
&lt;p&gt;Unlike in the original notebook wherein,&lt;/p&gt;
&lt;blockquote&gt;
We’re going to use FFT to do some simple edge detection. To simplify,
we do this on the black and white “intensity” image. In this case,
the kitty is already black and white, but in fact it’s still encoded
in three RGB channels in the PNG file. Combining these, in general,
could be done as follows …&lt;/blockquote&gt;
&lt;p&gt;we skip it, since PIL was kind enough to do it for us:&lt;/p&gt;
&lt;pre class="m-code"&gt;image.shape&lt;/pre&gt;
&lt;pre&gt;(200, 200)&lt;/pre&gt;
&lt;pre class="m-code"&gt;image_bw = image&lt;/pre&gt;
&lt;p&gt;Next, we transform to Fourier space using &lt;code&gt;fluidfft&lt;/code&gt;’s real FFT
transform. We have to rely on the &lt;code&gt;fft2d.with_pyfftw&lt;/code&gt; backend since
the other Cythonized &lt;code&gt;fft2d.with_fftw2d&lt;/code&gt; implementation assumes a
periodic boundary.&lt;/p&gt;
&lt;pre class="m-code"&gt;# Prepare our FFT object
o = fluidfft.create_fft_object(&amp;quot;fft2d.with_pyfftw&amp;quot;, *image.shape)  # A more powerful option is to use an &amp;quot;Operator&amp;quot; class, demonstrated below&lt;/pre&gt;
&lt;pre class="m-code"&gt;image_fs_bw = o.fft(image_bw)&lt;/pre&gt;
&lt;p&gt;The simplest way to do some edge detection is by calculating the
derivative of the intensity image. The derivative (the rate of change)
is high where a sharp transition from low to high intensity occurs
between two pixels, close to zero when there is little change and highly
negative for high to low transition.&lt;/p&gt;
&lt;p&gt;The derivative of an image can be calculated by multiplying the Fourier
transform of the image by
&lt;span class="formula"&gt;&lt;span class="sqrt"&gt;&lt;span class="radical"&gt;√&lt;/span&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="root"&gt; − 1&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;b&gt; k&lt;/b&gt; = &lt;i&gt;i&lt;/i&gt;&lt;b&gt;k&lt;/b&gt;&lt;/span&gt; and then
transforming the result back to real space. This must be done in each
direction and then the results can be combined to get the magnitude of
the gradient, which is a good multi-directional proxy for both kinds of
edges (intensity transitions form low to high and from high to low).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fluidfft&lt;/code&gt;’s operator classes also supplies these wavenumbers
&lt;span class="formula"&gt;&lt;b&gt;k&lt;/b&gt;&lt;/span&gt;, so you do not need to build them :).&lt;/p&gt;
&lt;pre class="m-code"&gt;from fluidfft.fft2d.operators import OperatorsPseudoSpectral2D

op = OperatorsPseudoSpectral2D(*image.shape, lx=np.pi, ly=np.pi, fft=&amp;quot;fft2d.with_pyfftw&amp;quot;)  # The lengths are arbitary&lt;/pre&gt;
&lt;pre class="m-code"&gt;kx = op.KX
ky = op.KY # N.B.: we use broadcasting to multiply in the right direction&lt;/pre&gt;
&lt;pre class="m-code"&gt;# do both derivatives separately
d_image_dx_fs_bw = 1j * kx * image_fs_bw
d_image_dy_fs_bw = 1j * ky * image_fs_bw&lt;/pre&gt;
&lt;p&gt;An &lt;strong&gt;effortless and efficent&lt;/strong&gt; way to do the gradient calculation was to
use the Pythranized function.&lt;/p&gt;
&lt;pre class="m-code"&gt;d_image_dx_fs_bw, d_image_dy_fs_bw = op.gradfft_from_fft(image_fs_bw)&lt;/pre&gt;
&lt;pre class="m-code"&gt;# transform back to normal space
d_image_dx_bw = op.ifft(d_image_dx_fs_bw)
d_image_dy_bw = op.ifft(d_image_dy_fs_bw)&lt;/pre&gt;
&lt;pre class="m-code"&gt;# and square-sum them in real space to get the gradient magnitude
d_image_grad_bw = np.sqrt(d_image_dx_bw ** 2 + d_image_dy_bw ** 2)&lt;/pre&gt;
&lt;pre class="m-code"&gt;display(d_image_grad_bw)&lt;/pre&gt;
&lt;img src="images/intensely_edgy_cat_24_0.png" /&gt;
&lt;p&gt;To get maximum contrast, rescale so that the maximum is 255 (the maximum
brightness value, i.e. bright white):&lt;/p&gt;
&lt;pre class="m-code"&gt;amax_d_image_grad_bw = d_image_grad_bw.max()&lt;/pre&gt;
&lt;pre class="m-code"&gt;display(d_image_grad_bw / amax_d_image_grad_bw * 255)&lt;/pre&gt;
&lt;img src="images/intensely_edgy_cat_27_0.png" /&gt;
&lt;/section&gt;
&lt;section id="rescaling"&gt;
&lt;h2&gt;Rescaling&lt;/h2&gt;
&lt;p&gt;To inspect the separate horizontal and vertical components, we need to
rescale the range of derivative values so that they all fit into the
[0,255] range of the RGB space. We subtract the minimum to set negative
values to zero and then divide by (max-min) and multiply by 255 to set
the maximum to 255 (and scale all intermediate values accordingly).&lt;/p&gt;
&lt;p&gt;We can then also sum the both components to get a slightly different
perspective on the above “absolute” multi-directional edge detector.&lt;/p&gt;
&lt;pre class="m-code"&gt;d_image_dx_bw_rescale = 255 * (d_image_dx_bw - d_image_dx_bw.min()) / (d_image_dx_bw.max() - d_image_dx_bw.min())
d_image_dy_bw_rescale = 255 * (d_image_dy_bw - d_image_dy_bw.min()) / (d_image_dy_bw.max() - d_image_dy_bw.min())

d_image_grad_bw_rescale = np.sqrt(d_image_dx_bw_rescale * d_image_dx_bw_rescale + d_image_dy_bw_rescale * d_image_dy_bw_rescale);
d_image_grad_bw_rescale -= d_image_grad_bw_rescale.min()
d_image_grad_bw_rescale /= d_image_grad_bw_rescale.max()
d_image_grad_bw_rescale *= 255&lt;/pre&gt;
&lt;section id="horizontal"&gt;
&lt;h3&gt;Horizontal&lt;/h3&gt;
&lt;pre class="m-code"&gt;display(d_image_dx_bw_rescale)&lt;/pre&gt;
&lt;img src="images/intensely_edgy_cat_31_0.png" /&gt;
&lt;/section&gt;
&lt;section id="vertical"&gt;
&lt;h3&gt;Vertical&lt;/h3&gt;
&lt;pre class="m-code"&gt;display(d_image_dy_bw_rescale)&lt;/pre&gt;
&lt;img src="images/intensely_edgy_cat_33_0.png" /&gt;
&lt;p&gt;The result differs slightly from that in &lt;a href="https://commons.wikimedia.org/wiki/File:Intensity_image_with_gradient_images.png"&gt;the original Wikipedia
image&lt;/a&gt;,
which is because their gradient function is a bit different. Their
matrix gradient method smoothes the image a bit, leading to slightly
less sharp edges, but also less sensitivity to noise in the image.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="combined"&gt;
&lt;h3&gt;Combined&lt;/h3&gt;
&lt;pre class="m-code"&gt;display(d_image_grad_bw_rescale)&lt;/pre&gt;
&lt;img src="images/intensely_edgy_cat_36_0.png" /&gt;
&lt;p&gt;This modified post was written entirely in the Jupyter notebook. You can
&lt;a href="https://raw.githubusercontent.com/ashwinvis/ashwinvis.github.io/develop/content/intensely_edgy_cat.ipynb"&gt;download&lt;/a&gt;
this notebook, or see a static view &lt;a href="https://nbviewer.jupyter.org/github/ashwinvis/ashwinvis.github.io/blob/develop/content/intensely_edgy_cat.ipynb"&gt;on
nbviewer&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="fluidfft"></category></entry></feed>