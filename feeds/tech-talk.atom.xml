<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ashwin Vishnu's Website - Tech Talk</title><link href="https://ashwinvis.github.io/" rel="alternate"></link><link href="https://ashwinvis.github.io/feeds/tech-talk.atom.xml" rel="self"></link><id>https://ashwinvis.github.io/</id><updated>2021-05-16T12:41:13+02:00</updated><entry><title>Ternary operators</title><link href="https://ashwinvis.github.io/ternary-operators.html" rel="alternate"></link><published>2021-05-16T12:41:13+02:00</published><updated>2021-05-16T12:41:13+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2021-05-16:/ternary-operators.html</id><summary type="html">&lt;p&gt;Different ways to compose ternary operator to condense if-else statements into expressions in several programming languages&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python has made a concious choice of promoting readability through its syntax.
A good example of this is the &lt;strong&gt;conditional expression&lt;/strong&gt; or &lt;strong&gt;ternary if-else
"operator"&lt;/strong&gt; in Python. What it means is instead of:&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;even_or_odd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Even or odd is defined for positive integers only!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;even&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;odd&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you can write in a condensed yet easy to decipher:&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;even_or_odd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Even or odd is defined for positive integers only!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;even&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;odd&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are new to this, I highly recommend that you use this. It would
reduce the indentation in nested if-else statements and need for intermediate
variables in more real-life codes.&lt;/p&gt;
&lt;h2 id="in-other-languages"&gt;&lt;a class="toclink" href="#in-other-languages"&gt;In other languages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In C/C++, Java, ECMAScript (a.k.a JavaScript) and possibly more languages the
syntax is a bit more terse. It looks like this with ECMAScript:&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;even_or_odd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Even or odd is defined for positive integers only!&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;even&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;odd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An advantage is that the syntax is more condensed; but as a downside, one
needs to remember which side of the colon &lt;code&gt;:&lt;/code&gt; assumes the value when the
condition is &lt;code&gt;True&lt;/code&gt; and &lt;em&gt;vice versa&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="c-style-ternary-operators-using-logical-operators"&gt;&lt;a class="toclink" href="#c-style-ternary-operators-using-logical-operators"&gt;C-style ternary operators using logical operators&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I found a trick to create similar obfuscated ternary operators in Python. Here it goes:&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;even_or_odd_ugly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Even or odd is defined for positive integers only!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;even&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;odd&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It looks nearly like the C-style ternary operator, but is not at all readable.
It works because &lt;a href="https://docs.python.org/3/library/stdtypes.html?#boolean-operations-and-or-not"&gt;how the logical boolean operators &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;
short-circuits&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Bash-like shells such expressions can be used to achieve the same effect:&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;even_or_odd&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; x -le &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Even or odd is defined for positive integers only!&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;

  &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;x &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;even&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;odd&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While writing shell scripts such "ternary operators" are an idiom, because Bash
commands returns a non-zero value in case of failure. This would be
preferred over use of if-else constructs in Bash which, I think, are
complicated in getting the syntax right.&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p build
./build.sh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Build successful!&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Build failed! Cleaning up ...&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -r build
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="bonus-when-to-avoid-if-else-statements-in-python"&gt;&lt;a class="toclink" href="#bonus-when-to-avoid-if-else-statements-in-python"&gt;Bonus: when to avoid if-else statements in Python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We saw a good example of when to use conditional expressions in Python. Now we
go on a tangent to look at some features baked into Python which further allow
the need for if-else statements.&lt;/p&gt;
&lt;h3 id="dictionary-lookup"&gt;&lt;a class="toclink" href="#dictionary-lookup"&gt;Dictionary lookup&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Instead of:&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# assume the variable `color_of_fruits` is a dictionary&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;color_of_fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color_of_fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you could use the oneliner:&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color_of_fruits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Environment variables of the system are accessed via a special dictionary-like
object &lt;code&gt;os.environ&lt;/code&gt;. However, for environment variables, there is a handy standard
library function &lt;code&gt;os.getenv&lt;/code&gt; which is useful. Instead of:&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;CC&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;c_compiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;c_compiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gcc&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;use:&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;c_compiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gcc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For both the &lt;a href="https://docs.python.org/3/library/stdtypes.html#dict.get"&gt;&lt;code&gt;dict.get&lt;/code&gt;&lt;/a&gt; method and &lt;a href="https://docs.python.org/3.8/library/os.html?#os.getenv"&gt;&lt;code&gt;os.getenv&lt;/code&gt;&lt;/a&gt; function, if
you leave out the default value, you get &lt;code&gt;None&lt;/code&gt; and no &lt;code&gt;KeyError&lt;/code&gt; would
be raised.&lt;/p&gt;
&lt;h3 id="fall-back-values"&gt;&lt;a class="toclink" href="#fall-back-values"&gt;Fall-back values&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Whenever you read files, download text from the internet it is not a 100%
guarantee that the result would be what you expect. In that case you might need
a fall-back value to work with. Take this naive case of reading and printing a
file &lt;code&gt;config.cfg&lt;/code&gt; which is empty:&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_config&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;config.cfg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File is empty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From the previous discussion, we see that we can simplify it using
conditional expressions as:&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_config_conditional&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;config.cfg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File is empty&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However in this case a cleaner option would be to use the short-circuiting
property of the &lt;code&gt;or&lt;/code&gt; operator to assign a fall-back value.&lt;/p&gt;
&lt;div class="m-code"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_config_fallback&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;config.cfg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;File is empty&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that in Python world, evaluating &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;""&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; as a part of
a boolean expression would mean the same.  Also in &lt;code&gt;print_config_fallback&lt;/code&gt;, the
variable &lt;code&gt;contents&lt;/code&gt; is for illustrative purposes and can be avoided.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a class="toclink" href="#further-reading"&gt;Further reading&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0308/"&gt;PEP 308&lt;/a&gt; which introduced conditional expressions to Python around
  18 years ago.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/stdtypes.html#dict.get"&gt;&lt;code&gt;dict.get&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.8/library/os.html?#os.getenv"&gt;&lt;code&gt;os.getenv&lt;/code&gt; function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech Talk"></category><category term="software"></category><category term="python"></category><category term="bash"></category><category term="c"></category><category term="cpp"></category><category term="java"></category><category term="ecmascript"></category></entry><entry><title>Fixing 434 links in 111 files for pyenv</title><link href="https://ashwinvis.github.io/fixing-links-for-pyenv.html" rel="alternate"></link><published>2020-08-20T16:50:51+02:00</published><updated>2020-08-20T16:50:51+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-08-20:/fixing-links-for-pyenv.html</id><summary type="html">&lt;p&gt;A.K.A. shell scripting is awesome, and why don’t-repeat-yourself (DRY) matters. Context: PyPy moved its repositories to Heptapod (unrelated, but I have to mention it is an awesome source-code forge and a project) and binary builds to downloads.python.org. PyPy could no longer be installed using pyenv. Since I happened to try install PyPy the same day it stopped working, I was among the few it noticed it.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The project pyenv has several small bash scripts, one for each version, both
binary and source builds. This totalled to a staggering 111 files with 434
lines of code containing the base URL &lt;a href="https://bitbucket.org/pypy/pypy/downloads"&gt;https://bitbucket.org/pypy/pypy/downloads&lt;/a&gt;
(which no longer works). On one hand, it makes it easier to understand, to
contribute to and to maintain pyenv. But at rare events such as this, when the
entire PyPy repository gets moved to &lt;a href="https://downloads.python.org/pypy"&gt;https://downloads.python.org/pypy&lt;/a&gt;, it
becomes unnecessarily painful to fix the code, because the &lt;strong&gt;same “value” gets
repeated&lt;/strong&gt; all over the code base. Here is &lt;code&gt;pypy3.5-6.0.0-src&lt;/code&gt; for example:&lt;/p&gt;
&lt;pre&gt;#require_gcc
prefer_openssl11
install_package &amp;quot;openssl-1.1.0j&amp;quot; &amp;quot;https://www.openssl.org/source/old/1.1.0/openssl-1.1.0j.tar.gz#31bec6c203ce1a8e93d5994f4ed304c63ccf07676118b6634edded12ad1b3246&amp;quot; mac_openssl --if has_broken_mac_openssl
install_package &amp;quot;pypy3-v6.0.0-src&amp;quot; &amp;quot;https://bitbucket.org/pypy/pypy/downloads/pypy3-v6.0.0-src.tar.bz2#ed8005202b46d6fc6831df1d13a4613bc40084bfa42f275068edadf8954034a3&amp;quot; &amp;quot;pypy_builder&amp;quot; verify_py35 ensurepip&lt;/pre&gt;
&lt;p&gt;One way to fix this would be to write a Python code parsing all the text. But
for some reason, it felt natural to apply shell scripting to this problem,
functionally.&lt;/p&gt;
&lt;section id="awk-curl-to-parse-and-check-links"&gt;
&lt;h2&gt;AWK + cURL: To parse and check links&lt;/h2&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;#!/bin/awk -f&lt;/span&gt;

&lt;span class="sr"&gt;/install_.*bitbucket.org.pypy/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;new&lt;/span&gt;&lt;span class="o"&gt;=$&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="kr"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/bitbucket.org\/pypy\/pypy\/downloads/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;downloads.python.org/pypy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;new&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;curl -s -o /dev/null -i -w &amp;#39;%{http_code}&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;new&lt;/span&gt;
  &lt;span class="nx"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;getline&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
  &lt;span class="kr"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# print &amp;quot;Working&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;new&lt;/span&gt;
    &lt;span class="kr"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# print &amp;quot;Not Working&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kr"&gt;print&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;AWK makes it effortless to match patterns and split fields based on arbitary
whitespace. Once the URL is detected, the AWK built-in &lt;code&gt;gsub&lt;/code&gt; is used, similar
to sed, to replace the link into a variable. The link is pinged using cURL and
only the header is retrieved, printing out 200 if the link works. The link is
then replaced with the new alternative if the link works. The last AWK block
&lt;code&gt;{print}&lt;/code&gt; spits out every line, modified or not.&lt;/p&gt;
&lt;p&gt;A downside of using AWK is it strips out any white space, which is a problem as
indentation gets broken. As a stop gap measure, I hard code an indentation of 2
spaces which seemed to be the most common occurrence.&lt;/p&gt;
&lt;p&gt;The AWK script (&lt;code&gt;links.awk&lt;/code&gt;) can be applied on a single file without any
edits as follows:&lt;/p&gt;
&lt;pre&gt;❯ awk -f links.awk pypy3.3-5.5-alpha&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="bash-gnu-parallel-to-parallelize-and-map-the-script-over-all-files"&gt;
&lt;h2&gt;Bash + GNU Parallel: To parallelize and map the script over all files&lt;/h2&gt;
&lt;pre class="m-code"&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -e
awk -f links.awk &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;.new&amp;quot;&lt;/span&gt;
mv -f &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;.new&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This nifty bash script takes one argument &lt;code&gt;$1&lt;/code&gt; which is a file we need to
change and outputs to a temporary file. If no error is encountered the original
file is replaced.&lt;/p&gt;
&lt;p&gt;The bash script (&lt;code&gt;links.sh&lt;/code&gt;) is parallelized on all files. An arbitrary
threshold of 4 processes are set in order to not spam the server:&lt;/p&gt;
&lt;pre&gt;ls pypy* -1 | parallel -j4 &amp;quot;./links.sh {}&amp;quot;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="vim-auto-formatting-bash-code"&gt;
&lt;h2&gt;Vim: Auto-formatting bash code&lt;/h2&gt;
&lt;p&gt;I needed to format the bash code to counter the indentations stripped out by
the AWK code. However, I did not want to touch all lines, because the files in
pyenv uses a strange code-style, where case blocks are not indented as it
should be:&lt;/p&gt;
&lt;pre&gt;case &amp;quot;$(pypy_architecture 2&amp;gt;/dev/null || true)&amp;quot; in
&amp;quot;linux&amp;quot; )
  install_package &amp;quot;pypy-1.6&amp;quot; &amp;quot;https://downloads.python.org/pypy/pypy-1.6-linux.tar.bz2#1266c8b5918d84432b8649535fb5c84f6b977331c242bf45c5944033562ce0b2&amp;quot; &amp;quot;pypy&amp;quot; verify_py27 ensurepip
  ;;
...&lt;/pre&gt;
&lt;p&gt;To my delight, Vim can &lt;a href="https://vim.fandom.com/wiki/Format_a_code_block"&gt;format&lt;/a&gt; any code intelligently, for an entire buffer, or
a block or a line (which is what I needed). A simple normal-mode mapping
&lt;code&gt;==&lt;/code&gt; works like a charm. I came up with this Vim script to search
for a pattern in a file and indent them.&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:FixIndents&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;ft&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;bash &lt;span class="nb"&gt;smartindent&lt;/span&gt;

&lt;span class="c"&gt;  &amp;quot; start at the top&lt;/span&gt;
  normal gg

&lt;span class="c"&gt;  &amp;quot; search for a particular string till end of the file, do not wrap&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; search&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^\\s*install_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; auto indent&lt;/span&gt;
    normal &lt;span class="p"&gt;==&lt;/span&gt;
  &lt;span class="k"&gt;endwhile&lt;/span&gt;

&lt;span class="c"&gt;  &amp;quot; save and quit&lt;/span&gt;
  &lt;span class="nb"&gt;write&lt;/span&gt;
  quit
&lt;span class="k"&gt;endfunction&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;One way to execute this would be to open all files as buffers in Vim and use
the &lt;code&gt;:source&lt;/code&gt; (to source the above Vim script) and &lt;code&gt;:bufdo call
FixIndents()&lt;/code&gt; command (to apply the function on all buffers). However this
proved to be too slow. Thus, once again the Vim script (&lt;code&gt;fix_indents.vim&lt;/code&gt;) is
sourced and the function &lt;code&gt;FixIndents()&lt;/code&gt; is called on the all files as
follows:&lt;/p&gt;
&lt;pre&gt;ls -1 pypy* | parallel &amp;quot;vim --not-a-term -S fix_indents.vim +'call FixIndents()' {}&amp;quot;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;It was a pleasing and learning experience to discover new bells and whistles of
tools that I often use. And all thanks to UNIX philosophy, disparate tools can
work together in harmony. The &lt;a href="https://github.com/pyenv/pyenv/pull/1682"&gt;end-result&lt;/a&gt; was merged into pyenv today.&lt;/p&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="software"></category><category term="python"></category><category term="open-source"></category></entry><entry><title>Power to the user (CSS)</title><link href="https://ashwinvis.github.io/power-to-the-usercss.html" rel="alternate"></link><published>2020-06-24T09:30:09+02:00</published><updated>2020-06-24T09:30:09+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-06-24:/power-to-the-usercss.html</id><summary type="html">&lt;p&gt;Tweaking the world wide web, one CSS stylesheet at a time&lt;/p&gt;</summary><content type="html">&lt;p&gt;You probably know that you can tweak appearance of websites with add-ons like
Stylus.  Ever since I figured out &lt;a href="https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector"&gt;how to use
Inspector&lt;/a&gt; and
&lt;a href="https://github.com/openstyles/stylus/wiki/Writing-styles"&gt;how to write&lt;/a&gt;
"installable" CSS stylesheets myself, I cannot resist the urge to fix websites
with a uneasy appearance. I try to fix it with a few lines of CSS and share it
with others.&lt;/p&gt;
&lt;h2 id="github-retro"&gt;&lt;a class="toclink" href="#github-retro"&gt;&lt;a href="https://gist.github.com/ashwinvis/569e7814ff91f52807554789afa7f107"&gt;GitHub Retro&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;GitHub quickly rolled out a new wider interface, which could be done a bit better,
IMHO.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Before&lt;/th&gt;
&lt;th align="center"&gt;After&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;img src="https://user-images.githubusercontent.com/9155111/85446389-ac604900-b594-11ea-8a1f-1018031719e0.png" width="100%"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;img src="https://user-images.githubusercontent.com/9155111/85515309-42c85500-b5fd-11ea-94d1-057e972bdc8c.png" width="100%"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/ashwinvis/569e7814ff91f52807554789afa7f107"&gt;Get it here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="mastodon-relax"&gt;&lt;a class="toclink" href="#mastodon-relax"&gt;&lt;a href="https://github.com/ashwinvis/mastodon-relax"&gt;Mastodon Relax&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is more advanced as it uses &lt;a href="https://github.com/FirefoxBar/xStyle/wiki/Style-format#use-advanced-options-in-styles"&gt;configurable
parameters&lt;/a&gt;.
The CSS rules are also less hacky, thanks to identifiable CSS classes in
Mastodon's frontend.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Before&lt;/th&gt;
&lt;th align="center"&gt;After&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;img alt="mr-before" src="https://raw.githubusercontent.com/ashwinvis/mastodon-relax/master/images/before.png"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;img alt="mr-after" src="https://raw.githubusercontent.com/ashwinvis/mastodon-relax/master/images/after.png"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="https://github.com/ashwinvis/mastodon-relax"&gt;Get it here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The stylesheets are CC-BY-SA licensed. Hope it is useful for you.&lt;/p&gt;</content><category term="Tech Talk"></category><category term="software"></category><category term="css"></category></entry><entry><title>Think before you monospace</title><link href="https://ashwinvis.github.io/ultimate-monospace.html" rel="alternate"></link><published>2020-06-15T17:23:27+02:00</published><updated>2020-06-15T17:23:27+02:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-06-15:/ultimate-monospace.html</id><summary type="html">&lt;p&gt;Put your programming font to the ultimate test case.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I conducted a &lt;a href="https://mastodon.acc.sunet.se/web/statuses/104329832337934635"&gt;poll&lt;/a&gt; on Mastodon to see if what fonts are used in programming
these days.&lt;/p&gt;
&lt;a href="https://mastodon.acc.sunet.se/web/statuses/104329832337934635"&gt;&lt;img alt="Poll on monospace font preference." class="m-image" src="/images/monospace_poll.png" /&gt;&lt;/a&gt;
&lt;p&gt;Despite the limited sample size, the poll seemed representative of package
installation &lt;a href="https://pkgstats.archlinux.de/compare/packages#packages=adobe-source-code-pro-fonts,ttf-anonymous-pro,ttf-bitstream-vera,ttf-cascadia-code,ttf-dejavu,ttf-hack,ttf-liberation,ttf-ms-fonts"&gt;statistics&lt;/a&gt;. After going through the replies to the &lt;a href="https://mastodon.acc.sunet.se/web/statuses/104329832337934635"&gt;poll&lt;/a&gt;, I
discovered a web application called &lt;a href="https://www.programmingfonts.org/"&gt;programming-fonts&lt;/a&gt; where you can try out 98
monospace fonts with syntax highlighting on the fly. However, a good test case was
missing.&lt;/p&gt;
&lt;p&gt;It is unlikely that a font would meet all features, while being &lt;em&gt;aesthetic&lt;/em&gt;.
Features include how similar characters are &lt;em&gt;distinguishable&lt;/em&gt; and eye-candy
like &lt;a href="https://www.hanselman.com/blog/MonospacedProgrammingFontsWithLigatures.aspx"&gt;ligatures&lt;/a&gt; (which can be useful or &lt;a href="https://nedbatchelder.com/blog/201604/latos_unfortunate_ligatures.html"&gt;weird&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;As they say,&lt;/p&gt;
&lt;blockquote&gt;
“Beauty lies in the eyes of the beholder.”&lt;/blockquote&gt;
&lt;p&gt;Here is a test case with some pseudo-code to identify common pitfalls and
features. See if it fits your needs and ensure no surprises.&lt;/p&gt;
&lt;style&gt;
 pre, code {
     font-family: monospace;
 }
 &lt;/style&gt;&lt;aside class="m-note m-info"&gt;
The test case below should render with the default monospace font
configured in your system. There are instructions in the end of the article
to try out a different font online by copying this test case template
as raw text.&lt;/aside&gt;
&lt;section id="test-case-template"&gt;
&lt;h2&gt;Test case template&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;&lt;span class="nd"&gt;@test&lt;/span&gt;                                 &lt;span class="c1"&gt;# INFO: How @ gets rendered&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ultimate_monospace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="c1"&gt;# INFO: Ligature for arrow&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;nfo&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;lnfo&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;Info&lt;/span&gt;       &lt;span class="c1"&gt;# WARN: 1, l, I should be distinguishable&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;                     &lt;span class="c1"&gt;# WARN: 0 and O should be distinguishable&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ifnd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                 &lt;span class="c1"&gt;# WARN: Ligature for fi&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="c1"&gt;# INFO: Ligature for ==, &amp;gt;=&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Octave&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;oper&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="o"&gt;~=&lt;/span&gt; &lt;span class="n"&gt;equals&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;% INFO: Ligature for &amp;amp;&amp;amp;; WARN: for ~=&lt;/span&gt;
     &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;arrow_operator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;              &lt;span class="c1"&gt;// INFO: Ligatures for arrow operator&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;lt;!-- INFO: Ligatures for HTML  --&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;/&amp;gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; tag &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Perl / Ruby / PHP&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                               &lt;span class="c1"&gt;# INFO: Ligatures for spaceship operator&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Haskell&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;-- INFO: Ligatures for Haskell operators: ++, &amp;gt;&amp;gt;=,&amp;lt;&amp;lt;=, &amp;gt;=&amp;gt;, &amp;lt;=&amp;lt;&lt;/span&gt;
&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="c1"&gt;-- instead of&lt;/span&gt;
&lt;span class="nf"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;span class="c1"&gt;-- simply go with&lt;/span&gt;
&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;

&lt;span class="c1"&gt;-- instead of&lt;/span&gt;
&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;span class="c1"&gt;-- simply go with&lt;/span&gt;
&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;span class="c1"&gt;-- or&lt;/span&gt;
&lt;span class="nf"&gt;g&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="try-it-yourself"&gt;
&lt;h2&gt;Try it yourself&lt;/h2&gt;
&lt;p&gt;Here is how the above test case renders with Python syntax highlighting and
Fira Code font:&lt;/p&gt;
&lt;a href="https://www.programmingfonts.org/"&gt;&lt;img alt="Monospace font preview on programmingfonts.org" class="m-image" src="/images/monospace_preview.png" /&gt;&lt;/a&gt;
&lt;aside class="m-note m-primary"&gt;
Feel free to copy the &lt;a href="https://raw.githubusercontent.com/ashwinvis/ashwinvis.github.io/develop/content/2020-06-15-ultimate-monospace.rst"&gt;raw-text&lt;/a&gt; and try it out on &lt;a href="https://www.programmingfonts.org/"&gt;programming-fonts&lt;/a&gt;.&lt;/aside&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="software"></category><category term="typography"></category><category term="ligatures"></category><category term="programming"></category></entry><entry><title>Automate boring writing with Vim</title><link href="https://ashwinvis.github.io/automate-boring-writing-with-vim.html" rel="alternate"></link><published>2020-05-29T18:23:23+02:00</published><updated>2020-11-20T00:00:00+01:00</updated><author><name>Ashwin Vishnu Mohanan</name></author><id>tag:ashwinvis.github.io,2020-05-29:/automate-boring-writing-with-vim.html</id><summary type="html">&lt;p&gt;Constructing obscure keyboard maps a.k.a. shortcuts in Vim to make repetitive tasks easier&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Two of my most used markup languages these days are Markdown and
reStructuredText. For instance, a common operation is two add hyperlinks while
blogging.  Both languages provide concise syntaxes to make links, but they tend
to need a lot more keystrokes to get it right. Another pain-point is the need for
escaping certain special characters while searching and replacing text.&lt;/p&gt;
&lt;p&gt;Well, not anymore!&lt;/p&gt;
&lt;section id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/tpope/vim-surround"&gt;vim-surround&lt;/a&gt;, &lt;a href="https://github.com/neovim/pynvim"&gt;pynvim&lt;/a&gt; + Neovim / Vim compiled with Python bindings&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-it-works"&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;Vim can be configured to behave differently based on the state it is in (reading to
buffer, file type, vim mode etc.). Keyboard shortcuts can be &lt;em&gt;mapped&lt;/em&gt; for such
scenarios either of these commands &lt;code&gt;map, nmap, imap, vmap, noremap, nnoremap,
inoremap, vnoremap&lt;/code&gt;.&lt;/p&gt;
&lt;section id="markdown"&gt;
&lt;h3&gt;Markdown&lt;/h3&gt;
&lt;p&gt;The following maps &lt;span class="strike"&gt;Shift+Enter&lt;/span&gt; &lt;code&gt;\a&lt;/code&gt; in the normal mode:&lt;/p&gt;
&lt;aside class="m-block m-warning"&gt;
&lt;h3&gt;Warning&lt;/h3&gt;
&lt;p&gt;Due to a quirk in terminals, it would be difficult to map &lt;code&gt;Shift+Enter&lt;/code&gt; /
&lt;code&gt;&amp;lt;S-CR&amp;gt;&lt;/code&gt; and &lt;code&gt;Ctrl+Enter&lt;/code&gt; / &lt;code&gt;&amp;lt;C-CR&amp;gt;&lt;/code&gt;.  Mapping &lt;code&gt;Shift-Enter&lt;/code&gt; might
be possible with some &lt;a href="https://stackoverflow.com/questions/16359878/vim-how-to-map-shift-enter"&gt;extra configuration&lt;/a&gt;
in your terminal. See also this stackoverflow &lt;a href="https://stackoverflow.com/a/598404"&gt;answer&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;&amp;quot;Markdown: inline-link maker&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;surround with [], find ], append ()&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown&lt;span class="p"&gt;,&lt;/span&gt;pandoc nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt; ysiW]&lt;span class="k"&gt;f&lt;/span&gt;]&lt;span class="k"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;to add an inline link:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;&lt;span class="ge"&gt;before&lt;/span&gt;
A sample sentence with a link

&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;&lt;span class="ge"&gt;after&lt;/span&gt;
A sample sentence with a [link]()&lt;/pre&gt;
&lt;p&gt;The following maps &lt;code&gt;Enter&lt;/code&gt; in the normal mode:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;&amp;quot;Markdown: link maker&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;yank inner word, surround with [], find ], append [], paste word, move right&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;mark l, go to end of file, add a line, append [], paste, move right, append:&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown&lt;span class="p"&gt;,&lt;/span&gt;pandoc nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; yiWysiW]&lt;span class="k"&gt;f&lt;/span&gt;]&lt;span class="k"&gt;a&lt;/span&gt;[]&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;PlmlGo&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;[]&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pla:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;to add a link with a handle:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;&lt;span class="ge"&gt;before&lt;/span&gt;
A sample passage with a link and containing
a lot of text.

&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;&lt;span class="ge"&gt;after&lt;/span&gt;
A sample passage with a [&lt;span class="nt"&gt;link&lt;/span&gt;][&lt;span class="nl"&gt;link&lt;/span&gt;] and containing
a lot of text.
[link]:&lt;/pre&gt;
&lt;p&gt;You can return back to the text by visiting the mark with &lt;code&gt;l&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following maps &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, &lt;code&gt;h3&lt;/code&gt;, &lt;code&gt;h4&lt;/code&gt; to create headings in the
normal mode:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;&amp;quot;Markdown: heading maker&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;mark h, go to beginning of the line, add #/##/###/### , go back to mark h&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown&lt;span class="p"&gt;,&lt;/span&gt;pandoc nmap h1 &lt;span class="nb"&gt;mh&lt;/span&gt;^&lt;span class="k"&gt;i&lt;/span&gt;#&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;`&lt;span class="k"&gt;h&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown&lt;span class="p"&gt;,&lt;/span&gt;pandoc nmap h2 &lt;span class="nb"&gt;mh&lt;/span&gt;^&lt;span class="k"&gt;i&lt;/span&gt;##&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;`&lt;span class="k"&gt;h&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown&lt;span class="p"&gt;,&lt;/span&gt;pandoc nmap h3 &lt;span class="nb"&gt;mh&lt;/span&gt;^&lt;span class="k"&gt;i&lt;/span&gt;###&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;`&lt;span class="k"&gt;h&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; markdown&lt;span class="p"&gt;,&lt;/span&gt;pandoc nmap h4 &lt;span class="nb"&gt;mh&lt;/span&gt;^&lt;span class="k"&gt;i&lt;/span&gt;####&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;`&lt;span class="k"&gt;h&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;&lt;span class="ge"&gt;before&lt;/span&gt;
A Heading

&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;&lt;span class="ge"&gt;after&lt;/span&gt;
&lt;span class="gh"&gt;# A Heading&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="restructuredtext"&gt;
&lt;h3&gt;reStructuredText&lt;/h3&gt;
&lt;p&gt;The following maps &lt;span class="strike"&gt;Shift+Enter&lt;/span&gt; &lt;code&gt;\a&lt;/code&gt; in the normal mode:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;&amp;quot;rST: inline-link maker&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;surround with ``, find `, append __, move left by 2 characters, insert &amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt; ysiW`&lt;span class="k"&gt;f&lt;/span&gt;`a__&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;hi&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;to add an inline link:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="cp"&gt;.. before&lt;/span&gt;
A sample sentence with a link

&lt;span class="cp"&gt;.. after&lt;/span&gt;
A sample sentence with a &lt;span class="s"&gt;`link &amp;lt;&amp;gt;`__&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The following maps &lt;code&gt;Enter&lt;/code&gt; in the normal mode:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;&amp;quot;rST: link maker&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;yank inner word, go to end of word, append _, mark l, end of document, add a&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;new line, insert .. _, paste, append:&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; yiWEa_&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;mlGo&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;..&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SPACE&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;_&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;pa&lt;/span&gt;:&lt;/pre&gt;
&lt;p&gt;to add a link with a handle:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="cp"&gt;.. before&lt;/span&gt;
A sample passage with a link and containing
a lot of text.

&lt;span class="cp"&gt;.. after&lt;/span&gt;
A sample passage with a link_ and containing
a lot of text.
&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;_link:&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;You can return back to the text by visiting the mark with &lt;code&gt;l&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following maps &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, &lt;code&gt;h3&lt;/code&gt;, &lt;code&gt;h4&lt;/code&gt; to create headings in the
normal mode:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;&amp;quot;rST: heading maker&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst nmap h1 yypVr#
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst nmap h2 yypVr&lt;span class="p"&gt;=&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst nmap h3 yypVr&lt;span class="p"&gt;-&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst nmap h4 yypVr&lt;span class="p"&gt;~&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-code"&gt;&lt;span class="cp"&gt;.. before&lt;/span&gt;
A Heading

&lt;span class="cp"&gt;.. after&lt;/span&gt;
&lt;span class="gh"&gt;A Heading&lt;/span&gt;
&lt;span class="gh"&gt;#########&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="search-and-replace"&gt;
&lt;h3&gt;Search and replace&lt;/h3&gt;
&lt;p&gt;In most editors, you could use &lt;code&gt;Ctrl+f&lt;/code&gt; to search text and &lt;code&gt;Ctrl+r&lt;/code&gt; to
search and replace text. While searching in Vim is a piece of cake with &lt;code&gt;/&lt;/code&gt;
key, search and replace is often a bit more painful.&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c"&gt;&amp;quot;{{{ Select (visual mode) and search / replace&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;python3&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endpython3
import &lt;span class="k"&gt;re&lt;/span&gt;
import &lt;span class="k"&gt;vim&lt;/span&gt;

&lt;span class="nb"&gt;def&lt;/span&gt; py_regex_escape&lt;span class="p"&gt;(&lt;/span&gt;string&lt;span class="p"&gt;=&lt;/span&gt;None&lt;span class="p"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;h&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; string &lt;span class="k"&gt;if&lt;/span&gt; string &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;vim&lt;/span&gt;.eval&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;@h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;h&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;re&lt;/span&gt;.escape&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.replace&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; string:
      print&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;:
      &lt;span class="k"&gt;vim&lt;/span&gt;.command&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;let @h=&amp;#39;{}&amp;#39;&amp;quot;&lt;/span&gt;.format&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

endpython3

command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;? RegexEscape :&lt;span class="k"&gt;py3&lt;/span&gt; py_regex_escape&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;args&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; http://stackoverflow.com/questions/676600/#676619&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Below h is used as a register to yank into&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Also search with \v prefix for searching with very magic and&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; if needed \V prefix with very nomagic. See `:help magic`&lt;/span&gt;
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;quot;hy:RegexEscape&amp;lt;CR&amp;gt;/\v&amp;lt;C-r&amp;gt;h&lt;/span&gt;
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;r&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;quot;hy:RegexEscape&amp;lt;CR&amp;gt;:%s/\v&amp;lt;C-r&amp;gt;h//gc&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;}}}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This powerful mapping would automatically try to do &lt;strong&gt;a Python regular expression
escape and fill the search or search-and-replace command&lt;/strong&gt; with a sample text
you selected in visual mode. An obvious caveat is that Python regex and Vim
regex are not identical. I have found the &lt;em&gt;very-magic&lt;/em&gt; mode to be close to
Python regex.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="improvements"&gt;
&lt;h3&gt;Improvements?&lt;/h3&gt;
&lt;p&gt;Before you say it, I agree these solutions are &lt;em&gt;far from elegant&lt;/em&gt;. Perhaps
&lt;a href="https://github.com/SirVer/ultisnips"&gt;UltiSnips&lt;/a&gt; can come in handy to create links. Let me know you find it useful or
you can improve it.&lt;/p&gt;
&lt;aside class="m-block m-info"&gt;
&lt;h3&gt;License&lt;/h3&gt;
&lt;p&gt;The code snippets above can be reused with an &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;Apache-2.0&lt;/a&gt; license.&lt;/p&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content><category term="Tech Talk"></category><category term="software"></category><category term="markdown"></category><category term="rst"></category><category term="vim"></category><category term="writing"></category></entry></feed>